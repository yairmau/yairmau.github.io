[
  {
    "objectID": "tutorials/latex/index.html",
    "href": "tutorials/latex/index.html",
    "title": " LaTeX",
    "section": "",
    "text": "Avoid hyphenization\n\\pretolerance=10000\n\\tolerance=2000 \n\\emergencystretch=10pt\nLine numbers\nSee more details here.\n\\usepackage{lineno}\n\\linenumbers"
  },
  {
    "objectID": "tutorials/python/widgets/parabola.html",
    "href": "tutorials/python/widgets/parabola.html",
    "title": "Yair Mau",
    "section": "",
    "text": "# write a widget in Python for Jupter notebook, where the user can change the parameters of a parabola using sliders, and the graph of the parabola responds in real time.\n# the code below was written by ChatGPT, with minor changes made by Yair\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom ipywidgets import interact, interactive, fixed, interact_manual\nimport ipywidgets as widgets\nfrom ipywidgets.embed import embed_minimal_html\n\n\ndef f(a,b,c):\n    x = np.linspace(-10,10,100)\n    y = a*x**2 + b*x + c\n    plt.plot(x,y)\n    plt.xlim([-10, 10])\n    plt.ylim([-10, 10])\n    plt.show()\n\n\nmywidget = interact(f, a=(-10,10,0.1), b=(-10,10,0.1), c=(-10,10,0.1))\nembed_minimal_html('par.html', views=[mywidget], title='Widgets export - parabola')\n\n\n\n\nAttributeError: 'function' object has no attribute 'get_view_spec'\n\n\n\nfrom ipywidgets import IntSlider\n\nslider = IntSlider(value=40)\nembed_minimal_html('export.html', views=[slider], title='Widgets export')"
  },
  {
    "objectID": "tutorials/python/widgets/chat2.html",
    "href": "tutorials/python/widgets/chat2.html",
    "title": "Yair Mau",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport numpy as np\nimport ipywidgets as widgets\n\ndef update_plot(slope):\n    x = np.linspace(0, 10, 100)\n    y = slope * x\n    plt.plot(x, y)\n    plt.ylim(0, 100)\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.show()\n\nslope_slider = widgets.FloatSlider(\n    value=1.0,\n    min=-5.0,\n    max=5.0,\n    step=0.1,\n    description='Slope:',\n    continuous_update=True,\n    orientation='horizontal',\n    readout=True,\n    readout_format='.1f',\n)\n\nwidgets.interact(update_plot, slope=slope_slider)\n\n\n\n\n&lt;function __main__.update_plot(slope)&gt;"
  },
  {
    "objectID": "tutorials/python/subplotgrid.html",
    "href": "tutorials/python/subplotgrid.html",
    "title": "Fancy subplot grid",
    "section": "",
    "text": "GridSpec is your friend\n\n\n\n\nWith GridSpec you can create any combination of panels\n\n\n\n\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nfrom matplotlib.ticker import FuncFormatter\nimport seaborn as sns\nsns.set(style=\"ticks\", font_scale=1.5)\n\n\n# figsize accepts only inches.\nfig = plt.figure(1, figsize=(8, 6))\ngs = gridspec.GridSpec(3, 2, width_ratios=[1,0.5], height_ratios=[1,0.7,0.3])\ngs.update(left=0.16, right=0.86,top=0.88, bottom=0.13, hspace=0.05, wspace=0.05)\n\n###########\n# subplot a\n###########\nax0 = plt.subplot(gs[0, :])\n\nheaviside = lambda x: 0.5 * (np.sign(x) + 1)\nx = np.arange(0, 10.01, 0.01)\nax0.plot(x, heaviside(x - 2), color='purple', lw=3)\nax0.text(2.5, 1.1, r\"$\\longleftarrow$ heaviside\")\n\n# y ticks as a percentage\nax0.set_yticks(np.arange(-0.5, 2.0, 0.5))\ndef to_percent(y, position):\n    # Ignore the passed in position. This has the effect of scaling the default\n    # tick locations.\n    s = \"{:+.0f}\".format(y * 100)  # str(100 * y)\n    # The percent symbol needs escaping in latex\n    if matplotlib.rcParams['text.usetex'] is True:\n        return s + r'$\\%$'\n    else:\n        return s + '%'\n# Create the formatter using the function to_percent. This multiplies all the\n# default labels by 100, making them all percentages\nformatter = FuncFormatter(to_percent)\n# Set the formatter\nax0.yaxis.set_major_formatter(formatter)\nax0.set_ylabel(\"heaviside, percentage\")\n\n# x ticks on top\nax0.axis([x.min(), x.max(), -0.5, 1.5])\nax0.xaxis.tick_top()\nax0.set_xlabel(r\"x labels on top\")\nax0.xaxis.set_label_position(\"top\")\n\n# transAxes makes position relative to axes\nax0.text(0.97, 0.97, r\"a\", transform=ax0.transAxes,\n         horizontalalignment='right', verticalalignment='top',\n         fontweight=\"bold\")\n\n# copy window with same x axis (y will be different)\nax0b = ax0.twinx()\nax0b.plot(x, np.tanh(x - 5), color=\"green\", linewidth=3)\nax0b.axis([x.min(), x.max(), -1.1, 2.5])\nax0b.text(5.5, 0, r\"tanh $\\longrightarrow$\")\nax0b.set_ylabel(r'tanh, offset label')\nax0b.yaxis.set_label_coords(1.1, 0.70)\n\n###########\n# subplot b\n###########\nax10 = plt.subplot(gs[1, 0])\n\nx = np.arange(-5, 5, 0.01)\ny = np.exp(-x)\nax10.plot(x, y, color=\"orange\", lw=3)\nax10.set_yscale('log', base=2)\nax10.set_yticks(2.0 ** np.arange(-7, 7, 3))\nax10.text(1.0, 1, r\"$y=e^{-x}$\")\nax10.set_xticks(np.arange(-5, 6, 2))\nax10.set_xticklabels(np.arange(-5, 6, 2), y=0.15)\nax10.get_yaxis().set_tick_params(direction='out')\nax10.set_ylabel(\"log scale base 2\", labelpad=15)\nax10.text(0.97, 0.97, r\"b\", transform=ax10.transAxes,\n          horizontalalignment='right', verticalalignment='top',\n          fontweight=\"bold\")\n\n###########\n# subplot c\n###########\nax11 = plt.subplot(gs[1, 1])\n\nx = np.arange(1.0, np.e ** 4, 0.01)\ny = x ** (-0.8)\nax11.plot(x, y, color=\"cyan\", lw=3)\nax11.text(2, 1, r\"$y=x^{-0.8}$\")\nax11.loglog(x, y)\nax11.set_xscale(\"log\", base=np.e)\nax11.set_yscale(\"log\", base=np.e)\nxt = np.exp(np.arange(1, 4, 1))\nyt = np.pi ** (np.arange(-3, 2, 1))\nax11.set_xticks(xt)\nax11.set_xticklabels(xt, y=0.15)\nax11.set_yticks(yt)\n\n\ndef ticks_e(y, pos):   # base e\n    return r'$e^{:.0f}$'.format(np.log(y))\n\n\ndef ticks_pi(y, pos):  # base pi, why not?\n    return r'$\\pi^{%+.0f}$'%(np.log(y)/np.log(np.pi))\n\n\nax11.xaxis.set_major_formatter(FuncFormatter(ticks_e))\nax11.yaxis.set_major_formatter(FuncFormatter(ticks_pi))\nax11.yaxis.tick_right()\nax11.yaxis.set_label_position(\"right\")\nax11.set_ylabel(\"right side\", labelpad=10)\nax11.text(0.97, 0.97, r\"c\", transform=ax11.transAxes,\n          horizontalalignment='right', verticalalignment='top',\n          fontweight=\"bold\")\n\n###########\n# subplot d\n###########\nax20 = plt.subplot(gs[2, 0])\n\nax20.axis([0, 1, 0, 1])\nax20.set_xticks(np.arange(0, 1.1, 0.2))\nax20.set_xticklabels([\"January\", \"February\",\n                      \"March\", \"April\",\n                      \"May\", \"June\"],\n                      rotation=30, horizontalalignment=\"right\")\nax20.set_yticks([])\nax20.text(0.97, 0.97, r\"d\", transform=ax20.transAxes,\n          horizontalalignment='right', verticalalignment='top',\n          fontweight=\"bold\")\n\n###########\n# subplot e\n###########\nax21 = plt.subplot(gs[2, 1])\n\nax21.set_xticks([])\nax21.set_yticks([])\nax21.axis([0, 1, 0, 1])\nax21.text(0.97, 0.97, r\"e\", transform=ax21.transAxes,\n          horizontalalignment='right', verticalalignment='top',\n          fontweight=\"bold\")\n\nfig.savefig(\"subplot-grid.png\", dpi=300)\nfig"
  },
  {
    "objectID": "tutorials/python/subplotgrid.html#introduction",
    "href": "tutorials/python/subplotgrid.html#introduction",
    "title": "Fancy subplot grid",
    "section": "",
    "text": "With GridSpec you can create any combination of panels"
  },
  {
    "objectID": "tutorials/python/subplotgrid.html#the-code",
    "href": "tutorials/python/subplotgrid.html#the-code",
    "title": "Fancy subplot grid",
    "section": "",
    "text": "import numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nfrom matplotlib.ticker import FuncFormatter\nimport seaborn as sns\nsns.set(style=\"ticks\", font_scale=1.5)\n\n\n# figsize accepts only inches.\nfig = plt.figure(1, figsize=(8, 6))\ngs = gridspec.GridSpec(3, 2, width_ratios=[1,0.5], height_ratios=[1,0.7,0.3])\ngs.update(left=0.16, right=0.86,top=0.88, bottom=0.13, hspace=0.05, wspace=0.05)\n\n###########\n# subplot a\n###########\nax0 = plt.subplot(gs[0, :])\n\nheaviside = lambda x: 0.5 * (np.sign(x) + 1)\nx = np.arange(0, 10.01, 0.01)\nax0.plot(x, heaviside(x - 2), color='purple', lw=3)\nax0.text(2.5, 1.1, r\"$\\longleftarrow$ heaviside\")\n\n# y ticks as a percentage\nax0.set_yticks(np.arange(-0.5, 2.0, 0.5))\ndef to_percent(y, position):\n    # Ignore the passed in position. This has the effect of scaling the default\n    # tick locations.\n    s = \"{:+.0f}\".format(y * 100)  # str(100 * y)\n    # The percent symbol needs escaping in latex\n    if matplotlib.rcParams['text.usetex'] is True:\n        return s + r'$\\%$'\n    else:\n        return s + '%'\n# Create the formatter using the function to_percent. This multiplies all the\n# default labels by 100, making them all percentages\nformatter = FuncFormatter(to_percent)\n# Set the formatter\nax0.yaxis.set_major_formatter(formatter)\nax0.set_ylabel(\"heaviside, percentage\")\n\n# x ticks on top\nax0.axis([x.min(), x.max(), -0.5, 1.5])\nax0.xaxis.tick_top()\nax0.set_xlabel(r\"x labels on top\")\nax0.xaxis.set_label_position(\"top\")\n\n# transAxes makes position relative to axes\nax0.text(0.97, 0.97, r\"a\", transform=ax0.transAxes,\n         horizontalalignment='right', verticalalignment='top',\n         fontweight=\"bold\")\n\n# copy window with same x axis (y will be different)\nax0b = ax0.twinx()\nax0b.plot(x, np.tanh(x - 5), color=\"green\", linewidth=3)\nax0b.axis([x.min(), x.max(), -1.1, 2.5])\nax0b.text(5.5, 0, r\"tanh $\\longrightarrow$\")\nax0b.set_ylabel(r'tanh, offset label')\nax0b.yaxis.set_label_coords(1.1, 0.70)\n\n###########\n# subplot b\n###########\nax10 = plt.subplot(gs[1, 0])\n\nx = np.arange(-5, 5, 0.01)\ny = np.exp(-x)\nax10.plot(x, y, color=\"orange\", lw=3)\nax10.set_yscale('log', base=2)\nax10.set_yticks(2.0 ** np.arange(-7, 7, 3))\nax10.text(1.0, 1, r\"$y=e^{-x}$\")\nax10.set_xticks(np.arange(-5, 6, 2))\nax10.set_xticklabels(np.arange(-5, 6, 2), y=0.15)\nax10.get_yaxis().set_tick_params(direction='out')\nax10.set_ylabel(\"log scale base 2\", labelpad=15)\nax10.text(0.97, 0.97, r\"b\", transform=ax10.transAxes,\n          horizontalalignment='right', verticalalignment='top',\n          fontweight=\"bold\")\n\n###########\n# subplot c\n###########\nax11 = plt.subplot(gs[1, 1])\n\nx = np.arange(1.0, np.e ** 4, 0.01)\ny = x ** (-0.8)\nax11.plot(x, y, color=\"cyan\", lw=3)\nax11.text(2, 1, r\"$y=x^{-0.8}$\")\nax11.loglog(x, y)\nax11.set_xscale(\"log\", base=np.e)\nax11.set_yscale(\"log\", base=np.e)\nxt = np.exp(np.arange(1, 4, 1))\nyt = np.pi ** (np.arange(-3, 2, 1))\nax11.set_xticks(xt)\nax11.set_xticklabels(xt, y=0.15)\nax11.set_yticks(yt)\n\n\ndef ticks_e(y, pos):   # base e\n    return r'$e^{:.0f}$'.format(np.log(y))\n\n\ndef ticks_pi(y, pos):  # base pi, why not?\n    return r'$\\pi^{%+.0f}$'%(np.log(y)/np.log(np.pi))\n\n\nax11.xaxis.set_major_formatter(FuncFormatter(ticks_e))\nax11.yaxis.set_major_formatter(FuncFormatter(ticks_pi))\nax11.yaxis.tick_right()\nax11.yaxis.set_label_position(\"right\")\nax11.set_ylabel(\"right side\", labelpad=10)\nax11.text(0.97, 0.97, r\"c\", transform=ax11.transAxes,\n          horizontalalignment='right', verticalalignment='top',\n          fontweight=\"bold\")\n\n###########\n# subplot d\n###########\nax20 = plt.subplot(gs[2, 0])\n\nax20.axis([0, 1, 0, 1])\nax20.set_xticks(np.arange(0, 1.1, 0.2))\nax20.set_xticklabels([\"January\", \"February\",\n                      \"March\", \"April\",\n                      \"May\", \"June\"],\n                      rotation=30, horizontalalignment=\"right\")\nax20.set_yticks([])\nax20.text(0.97, 0.97, r\"d\", transform=ax20.transAxes,\n          horizontalalignment='right', verticalalignment='top',\n          fontweight=\"bold\")\n\n###########\n# subplot e\n###########\nax21 = plt.subplot(gs[2, 1])\n\nax21.set_xticks([])\nax21.set_yticks([])\nax21.axis([0, 1, 0, 1])\nax21.text(0.97, 0.97, r\"e\", transform=ax21.transAxes,\n          horizontalalignment='right', verticalalignment='top',\n          fontweight=\"bold\")\n\nfig.savefig(\"subplot-grid.png\", dpi=300)\nfig"
  },
  {
    "objectID": "tutorials/python/leastsquares.html",
    "href": "tutorials/python/leastsquares.html",
    "title": "Least Squares",
    "section": "",
    "text": "How to fit a nonlinear function to data\n\n\n\n\nThis code produces the figure above. It’s main tool is the curve_fit method, that allows us to fit any function to data, and get optimal parameter values.\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.gridspec as gridspec\nimport scipy.special\nfrom scipy.optimize import curve_fit\nimport matplotlib.patches as patches\nimport seaborn as sns\nsns.set(style=\"ticks\", font_scale=1.5)\n\nDefine some functions\n\nx = np.arange(0, 12, 0.4)\n\ndef func(x, par0, par1, par2):\n    return par0 + np.cos(par1 * x + par2)\n\n\ndef add_rec(ax, c, v, col):\n    ax.add_patch(\n        patches.Rectangle(\n            c,          # (x,y)\n            np.abs(v),  # width\n            v,          # height\n            alpha=0.4,\n            color=col\n        )\n    )\n\nNow let’s plot some stuff\n\n%matplotlib notebook\n\nfig, [ax1, ax2] = plt.subplots(2, 1, figsize=(8,6), sharex=True, sharey=True,\n                               subplot_kw={'aspect':'equal'}\n                              )\nfig.subplots_adjust(left=0.04, right=0.98, top=0.93, bottom=0.15,\n                    hspace=0.05, wspace=0.02)\nparams = {#'backend': 'ps',\n          'font.family': 'serif',\n          'font.serif': ['Computer Modern Roman'],\n          'ps.usedistiller': 'xpdf',\n          'text.usetex': True,\n          # include here any neede package for latex\n          'text.latex.preamble': [r'\\usepackage{amsmath}'],\n          }\n# the parameter values\npar = (1.3, 2, 1)\n# generating data with noise\ny = func(x, *par) + (np.random.random(len(x)) - 0.5)\nax1.plot(x, y, marker='o', ls='None', markerfacecolor=\"blue\", markeredgecolor=\"black\")\nax2.plot(x, y, marker='o', ls='None', markerfacecolor=\"red\", markeredgecolor=\"black\")\n\n# best fit\npopt, pcov = curve_fit(func, x, y, p0=(1.5, 1.5, 2.5))  # p0 = initial guess\np0, p1, p2 = popt\n# The total sum of squares (proportional to the variance of the data)\nSStot = ((y - y.mean()) ** 2).sum()\n# The sum of squares of residuals\nSSres = ((y - func(x, p0, p1, p2)) ** 2).sum()\nRsquared = 1 - SSres / SStot\n# plot best fit\nh = np.linspace(x.min(), x.max(), 1001)\nfit, = ax1.plot(h, func(h, p0, p1, p2), color='black', linewidth=2)\nax1.legend([fit], [\"Best fit\"], loc=\"upper right\",\n           frameon=False, handlelength=4)\n# plot mean\nmean, = ax2.plot(h, h * 0 + np.mean(y), ls='--', color='black', linewidth=2)\nax2.legend([mean], [\"Mean\"], loc=\"upper right\", frameon=False, handlelength=4)\n\n# plot blue and red squares\nfor ind in np.arange(len(x)):\n    x0 = x[ind]\n    y0 = y[ind]\n    # print(x0,y0)\n    v1 = y0 - func(x0, p0, p1, p2)\n    v2 = y0 - y.mean()\n    add_rec(ax1, (x0, y0), -v1, \"blue\")\n    add_rec(ax2, (x0, y0), -v2, \"red\")\n\nax2.text(0.5, 2.9, r\"Total sum of squares: {:.1f}\".format(SStot))\nax1.text(0.5, -0.8, r\"Sum of squares of residuals: {:.1f}\".format(SSres))\n# ax2.set_xlabel(\n#          r\"R-squared = $1 - \\frac{\\text{blue area}}{\\text{red area}}$ = \" +\n#          \"{:.2f}\".format(Rsquared))\nax2.set_xlabel(\n              r\"R-squared = $1 - \\frac{\\mathrm{blue\\ area}}{\\mathrm{red\\ area}}$\"\n              )\nax1.set_xlabel(\n               r\"Data: $f(x) = p_0 + \\cos(p_1 x + p_2)+ $ noise \",\n               labelpad=12\n               )\nax1.xaxis.set_label_position(\"top\")\n\nax1.set(xlim=[x.min(), x.max()],\n        ylim=[-1, 3.5],\n        xticklabels=[],\n        yticks=np.arange(-1, 4)\n       )\nax2.set(\n        xticklabels=np.arange(0,13,2)\n       )\n\nfig.savefig(\"least-squares.png\", dpi=300)\n\n\n\n\n\n\n\n/Users/yairmau/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:70: UserWarning: FixedFormatter should only be used together with FixedLocator"
  },
  {
    "objectID": "tutorials/python/leastsquares.html#introduction",
    "href": "tutorials/python/leastsquares.html#introduction",
    "title": "Least Squares",
    "section": "",
    "text": "This code produces the figure above. It’s main tool is the curve_fit method, that allows us to fit any function to data, and get optimal parameter values."
  },
  {
    "objectID": "tutorials/python/leastsquares.html#the-code",
    "href": "tutorials/python/leastsquares.html#the-code",
    "title": "Least Squares",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.gridspec as gridspec\nimport scipy.special\nfrom scipy.optimize import curve_fit\nimport matplotlib.patches as patches\nimport seaborn as sns\nsns.set(style=\"ticks\", font_scale=1.5)\n\nDefine some functions\n\nx = np.arange(0, 12, 0.4)\n\ndef func(x, par0, par1, par2):\n    return par0 + np.cos(par1 * x + par2)\n\n\ndef add_rec(ax, c, v, col):\n    ax.add_patch(\n        patches.Rectangle(\n            c,          # (x,y)\n            np.abs(v),  # width\n            v,          # height\n            alpha=0.4,\n            color=col\n        )\n    )\n\nNow let’s plot some stuff\n\n%matplotlib notebook\n\nfig, [ax1, ax2] = plt.subplots(2, 1, figsize=(8,6), sharex=True, sharey=True,\n                               subplot_kw={'aspect':'equal'}\n                              )\nfig.subplots_adjust(left=0.04, right=0.98, top=0.93, bottom=0.15,\n                    hspace=0.05, wspace=0.02)\nparams = {#'backend': 'ps',\n          'font.family': 'serif',\n          'font.serif': ['Computer Modern Roman'],\n          'ps.usedistiller': 'xpdf',\n          'text.usetex': True,\n          # include here any neede package for latex\n          'text.latex.preamble': [r'\\usepackage{amsmath}'],\n          }\n# the parameter values\npar = (1.3, 2, 1)\n# generating data with noise\ny = func(x, *par) + (np.random.random(len(x)) - 0.5)\nax1.plot(x, y, marker='o', ls='None', markerfacecolor=\"blue\", markeredgecolor=\"black\")\nax2.plot(x, y, marker='o', ls='None', markerfacecolor=\"red\", markeredgecolor=\"black\")\n\n# best fit\npopt, pcov = curve_fit(func, x, y, p0=(1.5, 1.5, 2.5))  # p0 = initial guess\np0, p1, p2 = popt\n# The total sum of squares (proportional to the variance of the data)\nSStot = ((y - y.mean()) ** 2).sum()\n# The sum of squares of residuals\nSSres = ((y - func(x, p0, p1, p2)) ** 2).sum()\nRsquared = 1 - SSres / SStot\n# plot best fit\nh = np.linspace(x.min(), x.max(), 1001)\nfit, = ax1.plot(h, func(h, p0, p1, p2), color='black', linewidth=2)\nax1.legend([fit], [\"Best fit\"], loc=\"upper right\",\n           frameon=False, handlelength=4)\n# plot mean\nmean, = ax2.plot(h, h * 0 + np.mean(y), ls='--', color='black', linewidth=2)\nax2.legend([mean], [\"Mean\"], loc=\"upper right\", frameon=False, handlelength=4)\n\n# plot blue and red squares\nfor ind in np.arange(len(x)):\n    x0 = x[ind]\n    y0 = y[ind]\n    # print(x0,y0)\n    v1 = y0 - func(x0, p0, p1, p2)\n    v2 = y0 - y.mean()\n    add_rec(ax1, (x0, y0), -v1, \"blue\")\n    add_rec(ax2, (x0, y0), -v2, \"red\")\n\nax2.text(0.5, 2.9, r\"Total sum of squares: {:.1f}\".format(SStot))\nax1.text(0.5, -0.8, r\"Sum of squares of residuals: {:.1f}\".format(SSres))\n# ax2.set_xlabel(\n#          r\"R-squared = $1 - \\frac{\\text{blue area}}{\\text{red area}}$ = \" +\n#          \"{:.2f}\".format(Rsquared))\nax2.set_xlabel(\n              r\"R-squared = $1 - \\frac{\\mathrm{blue\\ area}}{\\mathrm{red\\ area}}$\"\n              )\nax1.set_xlabel(\n               r\"Data: $f(x) = p_0 + \\cos(p_1 x + p_2)+ $ noise \",\n               labelpad=12\n               )\nax1.xaxis.set_label_position(\"top\")\n\nax1.set(xlim=[x.min(), x.max()],\n        ylim=[-1, 3.5],\n        xticklabels=[],\n        yticks=np.arange(-1, 4)\n       )\nax2.set(\n        xticklabels=np.arange(0,13,2)\n       )\n\nfig.savefig(\"least-squares.png\", dpi=300)\n\n\n\n\n\n\n\n/Users/yairmau/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:70: UserWarning: FixedFormatter should only be used together with FixedLocator"
  },
  {
    "objectID": "courses/physics1/extra/extra-1d-kinematics.html",
    "href": "courses/physics1/extra/extra-1d-kinematics.html",
    "title": "Extra materials - 1d Kinematics",
    "section": "",
    "text": "This is an excellent interactive website, with lots of useful exercises:\nDistance vs. Displacement, Acceleration, Name That Motion, Motion Diagrams, Graph That Motion, Match That Graph, Position-Time Graphs - Conceptual Analysis, Position-Time Graphs - Numerical Analysis, Dots and Graphs, Which One Doesn’t Belong?, Free Fall, Up and Down."
  },
  {
    "objectID": "courses/physics1/extra/extra-1d-kinematics.html#the-physics-classroom",
    "href": "courses/physics1/extra/extra-1d-kinematics.html#the-physics-classroom",
    "title": "Extra materials - 1d Kinematics",
    "section": "",
    "text": "This is an excellent interactive website, with lots of useful exercises:\nDistance vs. Displacement, Acceleration, Name That Motion, Motion Diagrams, Graph That Motion, Match That Graph, Position-Time Graphs - Conceptual Analysis, Position-Time Graphs - Numerical Analysis, Dots and Graphs, Which One Doesn’t Belong?, Free Fall, Up and Down."
  },
  {
    "objectID": "courses/physics1/extra/extra-1d-kinematics.html#video-lectures",
    "href": "courses/physics1/extra/extra-1d-kinematics.html#video-lectures",
    "title": "Extra materials - 1d Kinematics",
    "section": "Video Lectures",
    "text": "Video Lectures\nKhan Academy - One-dimensional motion\nMotion in a Straight Line: Crash Course Physics #1\nMichel van Biezen - Lectures in MOTION IN ONE DIMENSION\nMichel van Biezen - Lectures in Motion in 1 Dimension: GRAPHIC SOLUTIONS"
  },
  {
    "objectID": "courses/physics1/extra/extra-1d-kinematics.html#x-v-a-graphs",
    "href": "courses/physics1/extra/extra-1d-kinematics.html#x-v-a-graphs",
    "title": "Extra materials - 1d Kinematics",
    "section": "\\(x\\), \\(v\\), \\(a\\) graphs",
    "text": "\\(x\\), \\(v\\), \\(a\\) graphs\nDraw the missing curves, with black dots in the same instants in time as in the given curve. All curved lines are parabolas.\nExercise 1 \nExercise 2  \nExercise 3  \nExercise 4  \nExercise 5  \nExercise 6"
  },
  {
    "objectID": "courses/physics1/extra/extra-1d-kinematics.html#match-the-graphs-x-and-v",
    "href": "courses/physics1/extra/extra-1d-kinematics.html#match-the-graphs-x-and-v",
    "title": "Extra materials - 1d Kinematics",
    "section": "Match the graphs, \\(x\\) and \\(v\\)",
    "text": "Match the graphs, \\(x\\) and \\(v\\)\nMatch the curve on the left with one of the curves on the right.\nExercise 1 \nExercise 2 \nExercise 3 \nExercise 4 \nExercise 5 \nExercise 6 \nExercise 7 \nExercise 8 \nExercise 9 \nExercise 10 \nExercise 11 \nExercise 12"
  },
  {
    "objectID": "courses/physics1/extra/extra-1d-kinematics.html#oil-drop-patterns",
    "href": "courses/physics1/extra/extra-1d-kinematics.html#oil-drop-patterns",
    "title": "Extra materials - 1d Kinematics",
    "section": "Oil drop patterns",
    "text": "Oil drop patterns\nOil drips from a car at fixed time intervals. Match the oil drop pattern the car leaves on the road with the curves on the right. Attention: there might be more than one solution!\nExercise 1 \nExercise 2 \nExercise 3 \nExercise 4 \nExercise 5 \nExercise 6 \nExercise 7 \nExercise 8 \nExercise 9 \nExercise 10 \nExercise 11 \nExercise 12 \nExercise 13 \nExercise 14 \nExercise 15 \nExercise 16 \nExercise 17 \nExercise 18"
  },
  {
    "objectID": "courses/physics1/extra/extra-basic-math.html",
    "href": "courses/physics1/extra/extra-basic-math.html",
    "title": "Extra materials - Basic Math",
    "section": "",
    "text": "I will assume that student in this course have a minimal proficiency in math. Find below some links for basic math that we will need during this course. I will not teach any of these topics, if you feel that you don’t fully know this stuff, please go ahead and study these topics asap."
  },
  {
    "objectID": "courses/physics1/extra/extra-basic-math.html#trigonometry",
    "href": "courses/physics1/extra/extra-basic-math.html#trigonometry",
    "title": "Extra materials - Basic Math",
    "section": "Trigonometry",
    "text": "Trigonometry\nKhan Academy\nMichel van Biezen"
  },
  {
    "objectID": "courses/physics1/extra/extra-basic-math.html#pre-algebra",
    "href": "courses/physics1/extra/extra-basic-math.html#pre-algebra",
    "title": "Extra materials - Basic Math",
    "section": "Pre-algebra",
    "text": "Pre-algebra\nArithmetic properties; factors and multiples; fractions; decimals; negative numbers and coordinate plane; rations, rates, proportions; equations, expressions, and inequalities; exponents, radicals, and scientific notation.\nKhan Academy"
  },
  {
    "objectID": "courses/physics1/extra/extra-basic-math.html#algebra",
    "href": "courses/physics1/extra/extra-basic-math.html#algebra",
    "title": "Extra materials - Basic Math",
    "section": "Algebra",
    "text": "Algebra\nMichel van Biezen"
  },
  {
    "objectID": "courses/physics1/extra/extra-basic-math.html#עברית",
    "href": "courses/physics1/extra/extra-basic-math.html#עברית",
    "title": "Extra materials - Basic Math",
    "section": "עברית",
    "text": "עברית\nקיים אתר של אקדמיית קהאן בעברית, כדאי להכיר אותו"
  },
  {
    "objectID": "courses/physics1/gifs/cartoons.html",
    "href": "courses/physics1/gifs/cartoons.html",
    "title": "Cartoons",
    "section": "",
    "text": "https://www.gocomics.com/calvinandhobbes/2015/01/12 \n\nhttps://xkcd.com/2207/ \n\nhttps://www.smbc-comics.com/comic/2013-06-16 \n\nScience: Abridged Beyond the Point of Usefulness \n\nhttp://www.sciencecartoonsplus.com/gallery/physics/galphys2j.php#"
  },
  {
    "objectID": "courses/physics1/gifs/wow.html",
    "href": "courses/physics1/gifs/wow.html",
    "title": "Wow",
    "section": "",
    "text": "rope swing record\ndoes the period of a pendulum depend on its mass? \n\n\nTime-Lapse: Lose Yourself in the Night Sky\n\n\n\n\nfastest response time\nThe kangaroo rat’s escape response to a snake attack is less than 70 milliseconds and the quickest mammalian startle response. \n\n\nSelected solar system objects to scale in size, rotation speed and axial tilt\n\n\n\n\nMilky Way and Earth\nMilky Way spinning around Earth\n\n\nMilky Way fixed, earth spinning round\n\n\n\n\nThe Milky Way Fly Out\nStefan Payne-Wardenaar \n\n\nLeast action, path of bowling ball minimizes action\n\n\n\n\n\n\nA free-falling frame of reference cancels gravity\n{% twitter https://twitter.com/sfera314/status/1173284029900173315 %}\n\n\nMesmerising Mass Sheep Herding\n\n\n\n\n\nSolar eclipse from space\n\n\n\n\n\n\n150 Ton Hydraulic Guillotine Vs Deck of Cards"
  },
  {
    "objectID": "courses/physics1/gifs/fluids.html",
    "href": "courses/physics1/gifs/fluids.html",
    "title": "Fluids",
    "section": "",
    "text": "f"
  },
  {
    "objectID": "courses/physics1/gifs/fluids.html#fluids",
    "href": "courses/physics1/gifs/fluids.html#fluids",
    "title": "Fluids",
    "section": "Fluids",
    "text": "Fluids\n\nHow a 50 kg iron working anvil floats on liquid mercury From https://twitter.com/Rainmaker1973/status/1194215829199605765?s=09"
  },
  {
    "objectID": "courses/physics1/gifs/fluids.html#hydrostatic-pressure",
    "href": "courses/physics1/gifs/fluids.html#hydrostatic-pressure",
    "title": "Fluids",
    "section": "Hydrostatic pressure",
    "text": "Hydrostatic pressure\n\nPressure change during diving\n{% twitter https://twitter.com/physicsastronmy/status/1464007031367602181?s=12 %}\n\n\nFish tower\n\n\n\n\nThe Hydrostatic Paradox - Explained!\n\n\n\n\nPascal’s Blaising Barrel - Exploding Glass Barrel with Water Pressure\n\n\n\n\nThe Pressure Paradox #VeritasiumContest #GrandPrizeWinner"
  },
  {
    "objectID": "courses/physics1/gifs/fluids.html#surface-tension",
    "href": "courses/physics1/gifs/fluids.html#surface-tension",
    "title": "Fluids",
    "section": "Surface tension",
    "text": "Surface tension\nfrom https://twitter.com/Rainmaker1973/status/1191329332926570497?s=09"
  },
  {
    "objectID": "courses/physics1/gifs/units.html",
    "href": "courses/physics1/gifs/units.html",
    "title": "Units",
    "section": "",
    "text": "Any time you pick up a well shuffled deck, you are almost certainly holding an arrangement of cards that has never before existed and will likely never exist again. \\(52! \\approx 10^{68}\\). Suppose a new permutation of 52 cards was drawn every second starting from The Big Bang (13.8 billion years ago). You wouldn’t even be close. To count out all 52! permutations you would need \\(10^{51}\\) ages of the universe. \n\n\nAny time you pick up a well shuffled deck, you are almost certainly holding an arrangement of cards that has never before existed and will likely never exist again. - Yannay Khaikin pic.twitter.com/afOpu0y7qA\n\n— 〈 Berger | Dillon 〉 (@InertialObservr) September 18, 2019\n\n\nIf you worked every single day, making $5000/day, from the time Columbus sailed to America, to the time you are reading this tweet, you would still not be a billionaire.\nHow much larger/heavier/longer was the Megalodon compared with a great white? \nThis is the mass damper of the Taipei 101 skyscraper: it has a mass of 728 tons and a diameter of 5.4 meters. It helps stabilize the building in high winds and this is the record movement realized during typhoon Soudelor with 160 km/h winds what is the mass density of this ball?\n\n\n\nThis is the mass damper of the Taipei 101 skyscraper: it has a mass of 728 tons and a diameter of 5.4 meters. It helps stabilize the building in high winds and this is the record movement realized during typhoon Soudelor with 160 km/h winds https://t.co/e0MxA0iOG5 pic.twitter.com/xqcbyUNJWs\n\n— Massimo (@Rainmaker1973) September 8, 2018\n\n\n\nhttps://www.youtube.com/watch?v=xqELmBNyWfU\n\n\n\norders of magnitude, from\n\nhttps://twitter.com/Rainmaker1973/status/1125710475378012161"
  },
  {
    "objectID": "courses/physics1/index.html",
    "href": "courses/physics1/index.html",
    "title": " Physics 1",
    "section": "",
    "text": "Goals\nThis basic Physics course has three main goals:\n\nBy the end of this course you will be able to look at the world around you and start describing it in a formal (mathematical) language.\nBy the end of this course you will be able to read a graph and tell the story behind it, i.e., you will translate a formal (mathematical) language into regular speech any human can understand.\nWe will get acquainted with the concept of Energy. This, in my humblest opinion, is one of the most important ideas in Science.\n\nPatron saint\nGalileo is undoubtedly our hero in this course. Honorable runners-up: Archimedes and Newton.\n\nLecture Notes (in hebrew) and more\nBook: I loosely use Halliday & Resnick’s Principles of Physics (11th edtion).\nSoftware: I use Stylus Labs Write to write my classnotes, it is available for Windows, Mac, Linux, Android, and iOS.\nHardware: I use both a Wacom Cintiq 16 and an iPad air.\nLegend:\n lecture notes pdf\n lecture notes source (write) svgz\n powerpoint\n widget in jupyter notebook (might take a while to load…)\n other materials\n animations and gifs\n\n\n\nsubject\nlectures\nother\n\n\n\n\nbasic math\n\n\n\n\nunits\n   \n   \n\n\n1d kinematics\n   \n         \n\n\nvectors\n   \n\n\n\n2d kinematics\n   \n   \n\n\ncircular motion\n   \n   \n\n\nNewton’s laws\n   \n      \n\n\nwork-energy theorem\n   \n   \n\n\npotential energy\n   \n\n\n\npotential energy diagrams\n   \n\n\n\nlinear momentum\n   \n   \n\n\ngravitation\n   \n\n\n\nhydrostatics\n   \n\n\n\nhydrodynamics\n   \n   \n\n\n\nClick here for details on all lectures of the 2021-22 academic year.\nHere are other very nice videos not directly related to any specific topic.\nSome past exams (in hebrew)\n\n\n\nYear\nMidterm\nMoed A\nMoed B\nMoed C\n\n\n\n\n2021-2022\n   \n   \n   \n\n\n\n2020-2021\n   \n   \n   \n\n\n\n2019-2020\n   \n   \n   \n   \n\n\n2018-2019\n   \n   \n   \n\n\n\n2017-2018\n   \n   \n   \n\n\n\n\nExtra stuff\nPhysics cartoons\nGreat online Physics resources: * Khan Academy - English * Khan Academy - עברית * Michel van Biezen * Walter Lewin’s 8.01x - MIT Physics I: Classical Mechanics * PhET: fun, free, interactive, research-based science and mathematics simulations"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "more/quotes.html",
    "href": "more/quotes.html",
    "title": " Quotes",
    "section": "",
    "text": "The scientist is not a person who gives the right answers, he’s one who asks the right questions.— Claude Lévi-Strauss\nThe most exciting phrase to hear in science, the one that heralds new discoveries, is not ‘Eureka!’ (I found it!) but ‘That’s funny…’— Isaac Asimov\nIn theory, there is no difference between theory and practice. But, in practice, there is.— Jan L. A. van de Snepscheut\nTheory is when you know everything but nothing works. Praxis is when everything works but no one knows why. In our lab, theory and praxis are combined: nothing works and no one knows why.— Unknown\nThe great tragedy of Science — the slaying of a beautiful hypothesis by an ugly fact.— Thomas Henry Huxley\nSo, in the face of overwhelming odds, I’m left with only one option, I’m gonna have to science the shit out of this.— Mark Watney\nThe fact that we live at the bottom of a deep gravity well, on the surface of a gas covered planet going around a nuclear fireball 90 million miles away and think this to be normal is obviously some indication of how skewed our perspective tends to be.— Douglas Adams, The Salmon of Doubt: Hitchhiking the Galaxy One Last Time\nEssentially, all models are wrong, but some are useful.— George E. P. Box\nAn expert is a person who has made all the mistakes that can be made in a very narrow field.— Niels Bohr\nAn expert is one who knows more and more about less and less until he knows absolutely everything about nothing.— Nicholas Butler\nJust as there are odors that dogs can smell and we cannot, as well as sounds that dogs can hear and we cannot, so too there are wavelengths of light we cannot see and flavors we cannot taste. Why then, given our brains wired the way they are, does the remark, “Perhaps there are thoughts we cannot think,” surprise you?— Richard Hamming\nNothing is more practical than a good theory.— Kurt Lewin\nResearch is what I’m doing when I don’t know what I’m doing.— Wernher von Braun\nThe purpose of models is not to fit the data but to sharpen the questions.— Samuel Karlin\nA theory is something nobody believes, except the person who made it. An experiment is something everybody believes, except the person who made it.— Attributed to Albert Einstein\nContrary to what Asimov says, the most exciting phrase in science, the one that heralds new discoveries, is not ‘Eureka!’ or ‘That’s funny…,’ it’s ‘Your research grant has been approved.’— John Alejandro King\nYou’d be amazed how much research you can get done when you have no life whatsoever.— Ernest Cline, Ready Player One\nWhen you have eliminated all which is impossible, then whatever remains, however improbable, must be the truth.— Sherlock Holmes\nWith four parameters I can fit an elephant, and with five I can make him wiggle his trunk.— John von Neumann\nThe purpose of computing is insight, not numbers.— Richard Hamming\nThe most important thing about an equation is all the quantities that don’t appear in it; once we know what the essentials are, figuring out how they depend on each other is often the easier part.— Pedro Domingos, The Master Algorithm\nThermodynamics is easy – I’ve learned it many times.— Harvey S. Leff\nFar better an approximate answer to the right question, which is often vague, than an exact answer to the wrong question, which can always be made precise.— John Tukey, The future of data analysis\nAn article about computational result is advertising, not scholarship. The actual scholarship is the full software environment, code and data, that produced the result.— Buckheit and Donoho (1995)\n”Forty-two!” yelled Loonquawl. ”Is that all you’ve got to show for seven and a half million years’ work?”\n”I checked it very thoroughly,” said the computer, ”and that quite definitely is the answer. I think the problem, to be quite honest with you, is that you’ve never actually known what the question is.”\n”But it was the Great Question! The Ultimate Question of Life, the Universe and Everything!” howled Loonquawl.\n”Yes,” said Deep Thought with the air of one who suffers fools gladly, ”but what actually is it?”\nA slow stupefied silence crept over the men as they stared at the computer and then at each other.\n”Well, you know, it’s just Everything … Everything … ” offered Phouchg weakly.\n”Exactly!” said Deep Thought. ”So once you do know what the question actually is, you’ll know what the answer means.”\n— Douglas Adams, The Hitchiker’s Guide to the Galaxy\nComputers are useless. They can only give you answers.— Pablo Picasso\nThe true and only goal of science is to reveal unity rather than mechanism.— Henri Poincaré\nOne of the principal objects of theoretical research is to find the point of view from which the subject appears in the greatest simplicity.— Josiah Willard Gibbs\nThe future is already here — it’s just not very evenly distributed.— William Gibson\nTrue science teaches, above all, to doubt and to be ignorant.— Miguel de Unamuno\nIf you are the smartest person in the room, then you are in the wrong room.— Unknown\nDividing one number by another is mere computation; knowing what to divide by what is mathematics.— Jordan Ellenberg, How Not to Be Wrong: The Power of Mathematical Thinking\nI’ve been in this argument a thousand times. Won them all and convinced nobody.— Amos Tversky, on the hot hand fallacy\nMathematics is the extension of common sense by other means.— Jordan Ellenberg, How Not to Be Wrong: The Power of Mathematical Thinking\nIf I had more time, I would have written a shorter letter.— Blaise Pascal\nI am going to give what I will call an elementary demonstration. But elementary does not mean easy to understand. Elementary means that very little is required to know ahead of time in order to understand it, except to have an infinite amount of intelligence. There may be a large number of steps that hard to follow, but to each does not require already knowing the calculus or Fourier transforms.— Richard P. Feynman\nIn this section a mathematical model of the growing embryo will be described. This model will be a simplification and an idealization, and consequently a falsification. It is to be hoped that the features retained for discussion are those of greatest importance in the present state of knowledge.— Alan Turing, The Chemical Basis of Morphogenesis\nProblems worthy of attack prove their worth by hitting back.— Piet Hein\nArt is solving problems that cannot be formulated before they have been solved. The shaping of the question is part of the answer.— Piet Hein\nPhysics is the simplest of all the sciences, and fundamental physics⁠⁠—the study of the basic pieces of reality at the deepest level⁠—is the simplest of all. Not \"simple” in the sense that the homework problems are easy, but simple in the sense that Galileo's trick of ignoring friction and air resistance makes our lives easier. The reason why physics classes seem so hard is not because physics is so hard—it's because we understand so much of it that there's a lot to learn, and that's because it's fundamentally pretty simple.\n— Sean Carroll, The Big Picture\nSimplicity is a great virtue but it requires hard work to achieve it and education to appreciate it. And to make matters worse: complexity sells better.— Edsger W. Dijkstra\nThe fundamental role of a teacher is not to deliver information. It is guide the social process of learning. The job of a teacher is to inspire, to challenge, to excite their students to want to learn. Yes, they also do explain and demonstrate and show things, but fundamentally that is beside the point. The most important thing a teacher does is make every student feel like they are important, to make them feel accountable for doing the work of learning.— Derek Alexander Muller, https://youtu.be/GEmuEWjHr5c\nWhat is the first business of one who practices philosophy? To get rid of self-conceit. For it is impossible for anyone to begin to learn that which he thinks he already knows.— Epictetus\nConfusion is a feeling that precedes learning something. It means you should pay closer attention, not disengage.— The Stoic Emperor, https://twitter.com/TheStoicEmperor/status/1309998964796567552\nWe don't use heuristics just because they are fast and efficient. We use them because they are less precise and thus less vulnerable to be misled by noise. A good heuristic is to distrust whoever adds or requires unnecessary precision. Another good heuristic is to distrust whoever thinks that precision always correlates with correctness.— Luca Dellanna, https://twitter.com/DellAnnaLuca/status/1287644735016927234\nLet no one ignorant of geometry enter here.— Said to be engraved on the door of Plato's Academy, the oldest recorded entrance requirement of a college\nThe comments aren't there to explain the code to the programmers, the code is there to explain the comments to the computer.— Andy Harris, How to begin thinking like a programmer, https://youtu.be/YWwBhjQN-Qw?t=1165"
  },
  {
    "objectID": "more/test/pres1.html#slide-title",
    "href": "more/test/pres1.html#slide-title",
    "title": "First presentation",
    "section": "Slide Title",
    "text": "Slide Title"
  },
  {
    "objectID": "more/test/pres1.html#getting-up",
    "href": "more/test/pres1.html#getting-up",
    "title": "First presentation",
    "section": "Getting up",
    "text": "Getting up\nsubtitle\n\nTurn off alarm\nGet out of bed\n\n\\[\nx_{1,2} =\n\\frac{-b\\pm \\sqrt{b^2 -4ac}}{2a}\n\\]"
  },
  {
    "objectID": "more/test/pres1.html#breakfast",
    "href": "more/test/pres1.html#breakfast",
    "title": "First presentation",
    "section": "Breakfast",
    "text": "Breakfast\n\nEat eggs\nDrink coffeex"
  },
  {
    "objectID": "more/test/pres1.html#dinner",
    "href": "more/test/pres1.html#dinner",
    "title": "First presentation",
    "section": "Dinner",
    "text": "Dinner\n\n\nLeft column\n\n\nRight column"
  },
  {
    "objectID": "more/test/pres1.html#going-to-sleep",
    "href": "more/test/pres1.html#going-to-sleep",
    "title": "First presentation",
    "section": "Going to sleep",
    "text": "Going to sleep\n\nGet in bed\nCount sheepc"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Yair Mau",
    "section": "",
    "text": "Yair Mau\n\n Senior Lecturer\n Institute of Environmental Sciences\n   The Hebrew University of Jerusalem\n\n\n\nContact\n   yair.mau@mail.huji.ac.il\n   +972 8 948 9386\n   Rehovot Campus, Lubell building, office 19. Map here\nAbout\nI’m fascinated by the natural world. I started out studying Physics, and then decided to use mathematical tools to understand processes in the critical zone, especially those concerning fluxes of water and carbon in the soil-plant-atmosphere continuum, both in the natural and agricultural environments.\nI’m interested in understanding how the feedbacks between climate, human stressors, and ecosystems, create interesting environmental dynamics. The main topics I deal with include plant resilience and survival under drought, soil degradation, sustainable resource use. Go the to  Science page to learn more about some of my current projects, and check out the  Papers page for details on already published works.\nBesides the usual academic pages (Science, Papers, Group, Courses), I hid a lot of material in the  More page: tutorials (python, latex), quotes, recommendations, etc.\nShort Bio\n2016–to date: Faculty member at the Hebrew University of Jerusalem\n2013–2016: Postdoc in Environmental Engineering, Duke University\n2013: PhD in Physics, Ben-Gurion University of the Negev\n2009: MSc in Physics, Ben-Gurion University of the Negev\n2005: BSc in Physics, University of São Paulo\n\n\nORCID\n\nScholar\n\nTwitter\n\nZoom\n\n\n\nPhilosophy of life: if you’re not having fun, you’re doing it wrong."
  },
  {
    "objectID": "science.html",
    "href": "science.html",
    "title": " Science",
    "section": "",
    "text": "Heatwave impact on plants\nHow resilient can plants be to severe heatwaves?\n\n\n\nA warming climate means higher climatic variability, including harsher heatwave events. Severe heatwaves impose great stress on plants, increasing the risk of desiccation and, ultimately, hydraulic failure.\nGuiding questions:\n\nWhat is the relative impact of soil drought and atmospheric drought on plant functioning?\nHow important are water storages (internal and in the soil) in maintaining transpiration and cooling?\nHow do plant resilience and survival chances depend on plant traits?\n\nWe investigate these questions through field and lab experiments with native Mediterranean species, continuously monitoring water fluxes and plant status. We analyze the data using time-series tools and machine-learning techniques. Through mathematical modeling, we investigate plant response to expected future climate.\n\n\n\n\n\n\n\n \n\n\nPlant optimal control\nHow can plants best regulate gas exchange, maximizing carbon uptake while minimizing water losses?\n\n\n\nIn order to make photosynthesis, plants capture CO2 from the atmosphere through the pores in their leaves (stomata). However, at the same time that CO2 enters the plant, water vapor exits. If too much water leaves the plant, it will desiccate and die, so the plant should keep its stomata mostly closed. On the other hand, the plant will starve from lack of carbon if it doesn’t open its stomata. We apply the tools of optimal control theory to study this fascinating problem.\nGuiding questions:\n\nWhich plant traits produce different water management strategies (e.g. isohydricity)?\nWhat is the plant really optimizing for? Instantaneous carbon assimilation? Maximum carbon gains over long periods? Fitness?\nHow do plants respond to stochastic environmental conditions?\n\n\n\n\n\n\n\n\n \n\n\nFruit-tree water stress\nCan we minimize water stress with smart irrigation scheduling? Can we do it optimally?\n\n\n\n\n\n\n\n\n\n\n \n\n\nSoil salinization\nHow can we ensure healthy soils for generations to come?\n\n\n\n\n\n\n\n\n\n\n \n\n\nSoil compaction\nWhat are the soil physical changes that follow compaction? How do they affect water and solute dynamics, and ultimately soil degradation?\n\n\n\n\n\nWhat is the first business of one who practices philosophy? To get rid of self-conceit. For it is impossible for anyone to begin to learn that which he thinks he already knows.\n— Epictetus"
  },
  {
    "objectID": "papers.html",
    "href": "papers.html",
    "title": " Papers",
    "section": "",
    "text": "2024\n\n Mantova et al.. Monitoring urban trees across the world. Report from the Urban Trees Ecophysiology Network UTEN inaugural workshop. New Phytologist, 2024.\n\n        \n        PDF\n     \n     BIBTEX\n    \n    \n\n            \n            \n        \n@article{mantova2024monitoring,\n    title = {Monitoring urban trees across the world. Report from the Urban Trees Ecophysiology Network (&lt;scp&gt;UTEN&lt;/scp&gt;) inaugural workshop: The Urban Trees Ecophysiology Network inaugural workshop,  Georgia Center at the University of Georgia,  Athens,  United States,  March 2023},\n    url = {http://dx.doi.org/10.1111/nph.19621},\n    DOI = {10.1111/nph.19621},\n    journal = {New Phytologist},\n    publisher = {Wiley},\n    author = {Mantova,  Marylou and Johnson,  Daniel M. and Antebi,  Jonathan and Beery,  Sara and Blumstein,  Meghan and Cohen,  Ron and Defavari,  Felipe and Feng,  Xue and Feuer,  Erez and Gersony,  Jess and Hammond,  William M. and John,  Grace and Marchin,  Renée M. and Mau,  Yair and Miller,  Bill and Nibbelink,  Clara and Ossola,  Alessandro and Paquette,  Alain and Rademacher,  Tim and Rissanen,  Kaisa and Shemesh‐Mayer,  Einat and Skelton,  Robert and Wilkening,  Jean V. and Preisler,  Yakir},\n    year = {2024},\n}\n\n            \n            \n            \n\n2023\n\n Isaac Kramer and Yair Mau. Review: Modeling the Effects of Salinity and Sodicity in Agricultural Systems. Water Resources Research, 2023.\n\n        \n        PDF\n     \n     BIBTEX\n    \n    \n\n            \n            \n        \n@article{kramer2022effects,\n    doi = {10.1029/2023WR034750},\n    url = {https://doi.org/10.1029/2023WR034750},\n    year = {2023},\n    volume = {59},\n    number = {6},\n    author = {Isaac Kramer and Yair Mau},\n    title = {Review: Modeling the Effects of Salinity and Sodicity in Agricultural Systems},\n    journal = {Water Resources Research},\n}\n\n            \n            \n            \n\n2022\n\n Isaac Kramer, Yaara Tsairi, Michael Buchdahl Roth, Alon Tal, and Yair Mau. Effects of population growth on Israel’s demand for desalinated water. npj Clean Water, 2022.\n\n        \n        PDF\n     \n     BIBTEX\n    \n    \n\n            \n            \n        \n@article{kramer2022effects,\n    doi = {10.1038/s41545-022-00215-9},\n    url = {https://doi.org/10.1038/s41545-022-00215-9},\n    year = {2022},\n    author = {Isaac Kramer and Yaara Tsairi and Michael Buchdahl Roth and Alon Tal and Yair Mau},\n    title = {Effects of population growth on Israel’s demand for desalinated water},\n    journal = {npj Clean Water},\n}\n\n            \n            \n            \n\n Isaac Kramer, Yuval Bayer, and Yair Mau. The Sustainability of Treated Wastewater Irrigation: The Impact of Hysteresis on Saturated Soil Hydraulic Conductivity. Water Resources Research, 2022.\n\n        \n        PDF\n     \n     BIBTEX\n    \n    \n\n            \n            \n        \n@article{kramer2022sustainability,\n    doi = {10.1029/2021WR031307},\n    url = {https://doi.org/10.1029/2021WR031307},\n    year = {2022},\n    author = {Isaac Kramer and Yuval Bayer and Yair Mau},\n    title = {The Sustainability of Treated Wastewater Irrigation: The Impact of Hysteresis on Saturated Soil Hydraulic Conductivity},\n    journal = {Water Resources Research},\n}\n\n            \n            \n            \n\n Taiwo Adeyemo, Isaac Kramer, Guy J. Levy, and Yair Mau. Salinity and sodicity can cause hysteresis in soil hydraulic conductivity. Geoderma, 2022.\n\n        \n        PDF\n     \n     BIBTEX\n    \n    \n\n            \n            \n        \n@article{adeyemo2022salinity,\n    doi = {10.1016/j.geoderma.2022.115765},\n    url = {https://doi.org/10.1016/j.geoderma.2022.115765},\n    year = {2022},\n    month = may,\n    publisher = {Elsevier {BV}},\n    volume = {413},\n    pages = {115765},\n    author = {Taiwo Adeyemo and Isaac Kramer and Guy J. Levy and Yair Mau},\n    title = {Salinity and sodicity can cause hysteresis in soil hydraulic conductivity},\n    journal = {Geoderma}\n}\n\n            \n            \n            \n\n Nurit Goldberg Yehuda, Shmuel Assouline, Yair Mau, and Uri Nachshon. Compaction effects on evaporation and salt precipitation in drying porous media. HESS, 2022.\n\n        \n        PDF\n     \n     BIBTEX\n    \n    \n\n            \n            \n        \n@article{goldberg2022compaction,\n    title={Compaction effects on evaporation and salt precipitation in drying porous media},\n    author={Goldberg-Yehuda, Nurit and Assouline, Shmuel and Mau, Yair and Nachshon, Uri},\n    journal={Hydrology and Earth System Sciences},\n    volume={26},\n    number={9},\n    pages={2499--2517},\n    year={2022},\n    publisher={Copernicus GmbH}\n}\n\n            \n            \n            \n\n2021\n\n Yuval R. Zelnik, Yair Mau, Moshe Shachak, and Ehud Meron. High-integrity human intervention in ecosystems: Tracking self-organization modes. PLOS Computational Biology, 2021.\n\n        \n        PDF\n     \n     BIBTEX\n    \n    \n\n            \n            \n        \n@article{zelnik2021high,\n      doi = {10.1371/journal.pcbi.1009427},\n      url = {https://doi.org/10.1371/journal.pcbi.1009427},\n      year = {2021},\n      author = {Yuval R. Zelnik and Yair Mau and Moshe Shachak and Ehud Meron},\n      title = {High-integrity human intervention in ecosystems: Tracking self-organization modes},\n      journal = {PLOS Computational Biology},\n      volume = {17},\n      number = {9},\n      pages = {e1009427}\n}\n\n            \n            \n            \n\n Isaac Kramer, Yuval Bayer, Taiwo Adeyemo, and Yair Mau. Hysteresis in soil hydraulic conductivity as driven by salinity and sodicity: a modeling framework. HESS, 2021.\n\n        \n        PDF\n     \n        \n        Github\n     \n     BIBTEX\n    \n    \n\n            \n            \n        \n@article{kramer2020hysteresis,\n      doi = {10.5194/hess-25-1993-2021},\n      url = {https://doi.org/10.5194/hess-25-1993-2021},\n      year = {2021},\n      author = {Isaac Kramer and Yuval Bayer and Taiwo Adeyemo and Yair Mau},\n      title = {Hysteresis in soil hydraulic conductivity as driven by salinity and sodicity: a modeling framework},\n      journal = {Hydrology and Earth System Sciences},\n      volume={25},\n      number={4},\n      pages={1993--2008}\n}\n\n            \n            \n            \n\n2020\n\n Isaac Kramer and Yair Mau. Soil degradation risks assessed by the SOTE model for salinity and sodicity. Water Resources Research, 2020.\n\n        \n        PDF\n     \n        \n        Github\n     \n     BIBTEX\n    \n    \n\n            \n            \n        \n@article{kramer2020soil,\n      doi = {10.1029/2020WR027456},\n      url = {https://doi.org/10.1029/2020WR027456},\n      year = {2020},\n      publisher = {Wiley},\n      volume = {56},\n      number = {10},\n      author = {Isaac Kramer and Yair Mau},\n      title = {Soil degradation risks assessed by the SOTE model for salinity and sodicity},\n      journal = {Water Resources Research}\n}\n\n            \n            \n            \n\n Xing Chen, Mukesh Kumar, Daniel de B. Richter, and Yair Mau. Impact of gully incision on hillslope hydrology. Hydrological Processes, 2020.\n\n        \n        PDF\n     \n     BIBTEX\n    \n    \n\n            \n            \n        \n@article{chen2020impact,\n  doi = {10.1002/hyp.13845},\n  url = {https://doi.org/10.1002/hyp.13845},\n  year = {2020},\n  publisher = {Wiley},\n  volume = {34},\n  number = {19},\n  pages = {3848--3866},\n  author = {Xing Chen and Mukesh Kumar and Daniel B. Richter and Yair Mau},\n  title = {Impact of gully incision on hillslope hydrology},\n  journal = {Hydrological Processes}\n}\n\n            \n            \n            \n\n Avigail Kaner, Yakir Preisler, José M. Grünzweig, and Yair Mau. Internal water storage buffering maintains plant function under drought as described by a general hydraulic model. bioRxiv, 2020.\n\n        \n        PDF\n     \n     BIBTEX\n    \n    \n\n            \n            \n        \n@article{kaner2020internal,\n  doi = {10.1101/2020.02.11.943563},\n  url = {https://doi.org/10.1101/2020.02.11.943563},\n  year = {2020},\n  publisher = {Cold Spring Harbor Laboratory},\n  volume = {},\n  number = {},\n  pages = {},\n  author = {Avigail Kaner and Yakir Preisler and Jos{\\'{e}} M Gr\\\"{u}nzweig and Yair Mau},\n  title = {Internal water storage buffering maintains plant function under drought as described by a general hydraulic model},\n  journal = {}\n}\n\n            \n            \n            \n\n2016\n\n Yair Mau and Amilcare Porporato. Optimal control solutions to sodic soil reclamation. Advances in Water Resources, 2016.\n\n        \n        PDF\n     \n     BIBTEX\n    \n    \n\n            \n            \n        \n@article{mau2016optimal,\n  doi = {10.1016/j.advwatres.2016.02.014},\n  year  = {2016},\n  publisher = {Elsevier {BV}},\n  volume = {91},\n  pages = {37--45},\n  author = {Yair Mau and Amilcare Porporato},\n  title = {Optimal control solutions to sodic soil reclamation},\n  journal = {Advances in Water Resources}\n}\n\n            \n            \n            \n\n2015\n\n Amilcare Porporato, Xue Feng, Stefano Manzoni, Yair Mau, Anthony J. Parolari, and Giulia Vico. Ecohydrological modeling in agroecosystems: Examples and challenges. Water Resources Research, 2015.\n\n        \n        PDF\n     \n     BIBTEX\n    \n    \n\n            \n            \n        \n@article{porporato2015ecohydrological,\n  doi = {10.1002/2015wr017289},\n  year  = {2015},\n  publisher = {Wiley-Blackwell},\n  author = {Amilcare Porporato and Xue Feng and Stefano Manzoni and Yair Mau and Anthony J. Parolari and Giulia Vico},\n  title = {Ecohydrological modeling in agroecosystems: Examples and challenges},\n  journal = {Water Resources Research},\n  volume = {51},\n  number = {7},\n  pages = {5081--5099}\n}\n\n            \n            \n            \n\n Yair Mau and Amilcare Porporato. A dynamical system approach to soil salinity and sodicity. Advances in Water Resources, 2015.\n\n        \n        PDF\n     \n     BIBTEX\n    \n    \n\n            \n            \n        \n@article{mau2015dynamical,\n  year  = {2015},\n  publisher = {Elsevier {BV}},\n  volume = {83},\n  pages = {68--76},\n  author = {Yair Mau and Amilcare Porporato},\n  title = {A dynamical system approach to soil salinity and sodicity},\n  journal = {Advances in Water Resources},\n  doi = {10.1016/j.advwatres.2015.05.010}\n}\n\n            \n            \n            \n\n Yair Mau, Lev Haim, and Ehud Meron. Reversing desertification as a spatial resonance problem. Physical Review E, 2015.\n\n        \n        PDF\n     \n     BIBTEX\n    \n    \n\n            \n            \n        \n@article{mau2015reversing,\n  title={Reversing desertification as a spatial resonance problem},\n  author={Yair Mau and Lev Haim and Ehud Meron},\n  journal={Physical Review E},\n  volume={91},\n  number={1},\n  pages={012903},\n  year={2015},\n  publisher={APS},\n  doi = {10.1103/physreve.91.012903},\n}\n\n            \n            \n            \n\n2014\n\n Yair Mau, Xue Feng, and Amilcare Porporato. Multiplicative jump processes and applications to leaching of salt and contaminants in the soil. Physical Review E, 2014.\n\n        \n        PDF\n     \n     BIBTEX\n    \n    \n\n            \n            \n        \n@article{mau2014multiplicative,\n  title={Multiplicative jump processes and applications to leaching of salt and contaminants in the soil},\n  author={Yair Mau and Xue Feng and Amilcare Porporato},\n  journal={Physical Review E},\n  volume={90},\n  number={5},\n  pages={052128},\n  year={2014},\n  publisher={APS},\n  doi = {10.1103/physreve.90.052128},\n}\n\n            \n            \n            \n\n Lev Haim, Yair Mau, and Ehud Meron. Spatial forcing of pattern-forming systems that lack inversion symmetry. Physical Review E, 2014.\n\n        \n        PDF\n     \n     BIBTEX\n    \n    \n\n            \n            \n        \n@article{haim2014spatial,\n  title={Spatial forcing of pattern-forming systems that lack inversion symmetry},\n  author={Lev Haim and Yair Mau and Ehud Meron},\n  journal={Physical Review E},\n  volume={90},\n  number={2},\n  pages={022904},\n  year={2014},\n  publisher={APS},\n  doi = {10.1103/physreve.90.022904},\n}\n\n            \n            \n            \n\n2013\n\n Yair Mau, Lev Haim, Aric Hagberg, and Ehud Meron. Competing resonances in spatially forced pattern-forming systems. Physical Review E, 2013.\n\n        \n        PDF\n     \n     BIBTEX\n    \n    \n\n            \n            \n        \n@article{mau2013competing,\n  title={Competing resonances in spatially forced pattern-forming systems},\n  author={Yair Mau and Lev Haim and Aric Hagberg and Ehud Meron},\n  journal={Physical Review E},\n  volume={88},\n  number={3},\n  pages={032917},\n  year={2013},\n  publisher={APS},\n  doi = {10.1103/physreve.88.032917},\n}\n\n            \n            \n            \n\n2012\n\n Yair Mau, Aric Hagberg, and Ehud Meron. Spatial periodic forcing can displace patterns it is intended to control. Physical Review Letters, 2012.\n\n        \n        PDF\n     \n     BIBTEX\n    \n    \n\n            \n            \n        \n@article{mau2012spatial,\n  title={Spatial periodic forcing can displace patterns it is intended to control},\n  author={Yair Mau and Aric Hagberg and Ehud Meron},\n  journal={Physical Review Letters},\n  volume={109},\n  number={3},\n  pages={034102},\n  year={2012},\n  publisher={APS},\n  doi = {10.1103/physrevlett.109.034102},\n}\n\n            \n            \n            \n\n2009\n\n Yair Mau, Aric Hagberg, and Ehud Meron. Dual-mode spiral vortices. Physical Review E, 2009.\n\n        \n        PDF\n     \n     BIBTEX\n    \n    \n\n            \n            \n        \n@article{mau2009dual,\n  title={Dual-mode spiral vortices},\n  author={Yair Mau and Aric Hagberg and Ehud Meron},\n  journal={Physical Review E},\n  volume={80},\n  number={6},\n  pages={065203},\n  year={2009},\n  publisher={APS},\n  doi = {10.1103/physreve.80.065203},\n} \n\n            \n            \n            \n\nTheses\nPhD Thesis\n\n\n\n\n Yair Mau. Pattern Formation in Spatially Forced Systems: Application to Vegetation Restoration. Advisor: Prof. Ehud Meron. PhD Thesis, Physics Department, Ben-Gurion University of the Neveg, Israel, 2013.\n\n\n\n        \n        PDF\n     \n     BIBTEX\n    \n    \n\n\n\n            \n            \n        \n\n\n@phdthesis{mau2013phdthesis,\n  title={Pattern Formation in Spatially Forced Systems: Application to Vegetation Restoration},\n  author={Yair Mau},\n  school={Physics Department, Ben-Gurion University of the Neveg, Israel},\n  year={2013},\n} \n\n\n\n            \n            \n            \n\n\n\n\n\n\n\n\nMSc Thesis\n\n\n\n\n Yair Mau. Localized Spatial Structures in Non-Equilibrium Systems. Advisor: Prof. Ehud Meron. MSc Thesis, Physics Department, Ben-Gurion University of the Neveg, Israel, 2009.\n\n\n\n        \n        PDF\n     \n     BIBTEX\n    \n    \n\n\n\n            \n            \n        \n\n\n@phdthesis{mau2009mscthesis,\n  title={Localized Spatial Structures in Non-Equilibrium Systems},\n  author={Yair Mau},\n  school={Physics Department, Ben-Gurion University of the Neveg, Israel},\n  year={2009},\n}\n\n\n\n            \n            \n            \n\n\n\n\n\n\n\n\n\nThe most important thing about an equation is all the quantities that don’t appear in it; once we know what the essentials are, figuring out how they depend on each other is often the easier part.\n— Pedro Domingos, The Master Algorithm"
  },
  {
    "objectID": "archive/physics/widgets/riemann_integral.html",
    "href": "archive/physics/widgets/riemann_integral.html",
    "title": "To use this widget, click on: Run > Run All Cells, then scroll down and move the sliders",
    "section": "",
    "text": "%matplotlib widget\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport ipywidgets as widgets\nfrom ipywidgets import interactive\nimport seaborn as sns\nsns.set(style=\"ticks\", font_scale=1.5)\n\n\nfig, ax = plt.subplots(figsize=(6,6))\nfig.subplots_adjust(left=0.14, right=0.97, top=0.99, bottom=0.10,\n                    hspace=0.05, wspace=0.02)\nx = np.linspace(0,10,101)\nfoo = lambda x: (1*x**3 - 12*x**2 + 300) / 5\ny = foo(x)\nax.plot(x, y, color=\"red\")\nax.set(xlim=[0, 10],\n       ylim=[0, 65],\n       xlabel=\"x\",\n      )\nax.set_ylabel(\"y\", rotation=\"horizontal\",labelpad=15)\nax.fill_between(x,y1=y, y2=0, color=\"red\", alpha=0.2)\nred_area = 300\nax.text(10, 60, f\"Red Area = {red_area:.2f}\", ha=\"right\", fontsize=16)\n\ndef draw_blue_rect(axx, n):\n    r_x = np.linspace(0,10,n+1)\n    blue_area = 0.0\n    rects = []\n    for i,v in enumerate(r_x[:-1]):\n        Y1 = foo(np.mean([r_x[i], r_x[i+1]]))\n        rect = ax.fill_between([r_x[i], r_x[i+1]],\n                               y1 = Y1, y2=0, color=\"blue\", alpha=0.2,\n                               edgecolor=\"black\")\n        rects.append(rect)\n        blue_area = blue_area + (r_x[i+1] - r_x[i])*Y1\n        ax.rects = rects\n    ax.blue_area = ax.text(10, 55, f\"Blue Area = {blue_area:.2f}\",\n                           ha=\"right\", fontsize=16)\n\ndraw_blue_rect(ax, 1)\n\n@widgets.interact(n=(1, 25, 1))\ndef update(n = 1):\n    \"\"\"Remove old lines from plot and plot new one\"\"\"\n    [l.remove() for l in ax.rects]\n    ax.blue_area.remove()\n    draw_blue_rect(ax, n)"
  },
  {
    "objectID": "archive/physics/widgets/riemann_integral.html#to-use-this-widget-click-on-run-run-all-cells-then-scroll-down-and-move-the-sliders",
    "href": "archive/physics/widgets/riemann_integral.html#to-use-this-widget-click-on-run-run-all-cells-then-scroll-down-and-move-the-sliders",
    "title": "To use this widget, click on: Run > Run All Cells, then scroll down and move the sliders",
    "section": "",
    "text": "%matplotlib widget\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport ipywidgets as widgets\nfrom ipywidgets import interactive\nimport seaborn as sns\nsns.set(style=\"ticks\", font_scale=1.5)\n\n\nfig, ax = plt.subplots(figsize=(6,6))\nfig.subplots_adjust(left=0.14, right=0.97, top=0.99, bottom=0.10,\n                    hspace=0.05, wspace=0.02)\nx = np.linspace(0,10,101)\nfoo = lambda x: (1*x**3 - 12*x**2 + 300) / 5\ny = foo(x)\nax.plot(x, y, color=\"red\")\nax.set(xlim=[0, 10],\n       ylim=[0, 65],\n       xlabel=\"x\",\n      )\nax.set_ylabel(\"y\", rotation=\"horizontal\",labelpad=15)\nax.fill_between(x,y1=y, y2=0, color=\"red\", alpha=0.2)\nred_area = 300\nax.text(10, 60, f\"Red Area = {red_area:.2f}\", ha=\"right\", fontsize=16)\n\ndef draw_blue_rect(axx, n):\n    r_x = np.linspace(0,10,n+1)\n    blue_area = 0.0\n    rects = []\n    for i,v in enumerate(r_x[:-1]):\n        Y1 = foo(np.mean([r_x[i], r_x[i+1]]))\n        rect = ax.fill_between([r_x[i], r_x[i+1]],\n                               y1 = Y1, y2=0, color=\"blue\", alpha=0.2,\n                               edgecolor=\"black\")\n        rects.append(rect)\n        blue_area = blue_area + (r_x[i+1] - r_x[i])*Y1\n        ax.rects = rects\n    ax.blue_area = ax.text(10, 55, f\"Blue Area = {blue_area:.2f}\",\n                           ha=\"right\", fontsize=16)\n\ndraw_blue_rect(ax, 1)\n\n@widgets.interact(n=(1, 25, 1))\ndef update(n = 1):\n    \"\"\"Remove old lines from plot and plot new one\"\"\"\n    [l.remove() for l in ax.rects]\n    ax.blue_area.remove()\n    draw_blue_rect(ax, n)"
  },
  {
    "objectID": "archive/physics/lectures/max_range.html",
    "href": "archive/physics/lectures/max_range.html",
    "title": "Yair Mau",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\nimport ipywidgets as widgets\nfrom ipywidgets import interactive\n\n\n%matplotlib inline\n\npi = np.pi\ndef f(alpha, v0, show_v):\n    fig, ax = plt.subplots(figsize=(8,6))\n    x = np.linspace(-2,18,501)\n    t = np.linspace(0,5,101)\n    g = 9.8\n    trajectory = lambda x: np.tan(alpha)*x - (g/(2*v0**2*(np.cos(alpha))**2)*x**2)\n    xoft = lambda t: v0*np.cos(alpha)*t\n    yoft = lambda t: v0*np.sin(alpha)*t - g*t**2/2\n    y = trajectory(x)\n    ax.plot(x, y, color=\"red\", lw=3)\n    ax.set(xlim=[-2,12], ylim=[-1,6], ylabel=\"y\")\n    ax.set_xlabel(\"x (m)\", fontsize=14)\n    ax.set_ylabel(\"y (m)\", fontsize=14, rotation=\"horizontal\",labelpad=15)\n    ax.fill_between(x,y1=0,y2=-10, color=\"xkcd:grass\", zorder=10)\n    ax.fill_between(x,y1=0,y2=10, color=\"xkcd:sky\", zorder=-10)\n    ax.scatter(9, 5, s=4000, facecolor=\"yellow\")\n    if show_v:\n        v = v0*0.4\n        vx = v * np.cos(alpha)\n        vy = v * np.sin(alpha)\n        ax.annotate(\"\", xy=(vx, vy), xytext=(0, 0),\n                    arrowprops=dict(facecolor='black',\n                                    #shrink=0.0,\n                                    connectionstyle=\"arc3\",\n                                    arrowstyle=\"simple\")\n                   )\n        ax.text(vx, vy, r\"$v_0$\", fontsize=20)\n        \ninteractive_plot = interactive(f, alpha=widgets.FloatSlider(min=0, max=pi/2-0.001, step=pi/50, value=np.pi/6, description=r'$\\alpha$ (rad)'),\n                                  v0=widgets.FloatSlider(min=1, max=10, step=1, value=5, description=r'$v_0$ (m/s)'),\n                                  show_v=widgets.Checkbox(value=True))\noutput = interactive_plot.children[-1]\n# to avoid flickering: https://ipywidgets.readthedocs.io/en/latest/examples/Using%20Interact.html#Flickering-and-jumping-output\noutput.layout.height = '400px'\ninteractive_plot"
  },
  {
    "objectID": "archive/physics/lectures/instantaneous_velocity.html",
    "href": "archive/physics/lectures/instantaneous_velocity.html",
    "title": "Yair Mau",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"ticks\", font_scale=1.5)\nsns.set_context(\"poster\")\nimport ipywidgets as widgets\nfrom ipywidgets import interactive\n\n\n%matplotlib inline\n\ndef f(Tmiddle, deltaT, show_deltas, show_tangent):\n    fig, ax = plt.subplots(figsize=(8,6))\n    t = np.linspace(0,20,101)\n    foo = lambda t: (t**3 - 15*t**2 + 300) / 100\n    x = foo(t)\n    ax.plot(t, x, color=\"red\", lw=3)\n    ax.set(xlim=[0,20], ylim=[-5,20], ylabel=\"y\", xticks=np.arange(0,21,5))\n    ax.set_xlabel(\"time\")\n    ax.set_ylabel(\"x(t)\", rotation=\"horizontal\",labelpad=15)\n    t0 = Tmiddle - deltaT/2\n    t1 = Tmiddle + deltaT/2\n    x0 = foo(t0)\n    x1 = foo(t1)\n    ax.plot([t0,t1], [x0,x1], color=\"blue\", lw=2)\n    if show_deltas:\n        ax.plot([t0,t1], [x0,x0], color=\"gray\")\n        ax.plot([t1,t1], [x0,x1], color=\"gray\")\n        ax.text(Tmiddle, x0, r\"$\\Delta t$\", fontsize=20,va=\"top\")\n        ax.text(t1, (x1+x0)/2, r\"$\\Delta x$\", fontsize=20)\n    if show_tangent:\n        slope = (3*Tmiddle**2 - 30*Tmiddle) / 100\n        intercept = foo(Tmiddle) - slope*Tmiddle\n        Tmin = -100\n        Tmax = 100\n        line = lambda t: slope*t + intercept\n        ax.plot([Tmin, Tmax], [line(Tmin), line(Tmax)],\n                color=\"black\", ls=\":\")\n        \ninteractive_plot = interactive(f, Tmiddle=widgets.FloatSlider(min=1, max=17, step=0.5, value=15),\n                                  deltaT=widgets.FloatSlider(min=0, max=8, step=0.2, value=5),\n                                  show_deltas=widgets.Checkbox(value=True),\n                                  show_tangent=widgets.Checkbox(value=True))\noutput = interactive_plot.children[-1]\n# to avoid flickering: https://ipywidgets.readthedocs.io/en/latest/examples/Using%20Interact.html#Flickering-and-jumping-output\noutput.layout.height = '450px'\ninteractive_plot"
  },
  {
    "objectID": "archive/physics/lectures/riemann_integral.html",
    "href": "archive/physics/lectures/riemann_integral.html",
    "title": "Yair Mau",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\nimport ipywidgets as widgets\nfrom ipywidgets import interactive\nimport seaborn as sns\nsns.set(style=\"ticks\", font_scale=1.5)\nsns.set_context(\"poster\")\n\n\n%matplotlib inline\n\ndef f(n):\n    fig, ax = plt.subplots(figsize=(8,6))\n    x = np.linspace(0,10,101)\n    foo = lambda x: (1*x**3 - 12*x**2 + 300) / 5\n    y = foo(x)\n    ax.plot(x, y, color=\"red\")\n    a=n\n    ax.set(ylim=[0,65], ylabel=\"y\")\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"y\", rotation=\"horizontal\",labelpad=15)\n    ax.fill_between(x,y1=y, y2=0, color=\"red\", alpha=0.2)\n    r_x = np.linspace(0,10,n+1)\n    blue_area = 0.0\n    for i,v in enumerate(r_x[:-1]):\n        Y1 = foo(np.mean([r_x[i], r_x[i+1]]))\n        ax.fill_between([r_x[i], r_x[i+1]],\n                        y1 = Y1, y2=0, color=\"blue\", alpha=0.2)\n        blue_area = blue_area + (r_x[i+1] - r_x[i])*Y1\n    red_area = 300\n    ax.text(10, 60, f\"Red Area = {red_area:.2f}\", ha=\"right\", fontsize=16)\n    ax.text(10, 55, f\"Blue Area = {blue_area:.2f}\", ha=\"right\", fontsize=16)\n\ninteractive_plot = interactive(f, n=widgets.IntSlider(min=1, max=25))\noutput = interactive_plot.children[-1]\n# to avoid flickering: https://ipywidgets.readthedocs.io/en/latest/examples/Using%20Interact.html#Flickering-and-jumping-output\noutput.layout.height = '400px'\ninteractive_plot"
  },
  {
    "objectID": "archive/physics/widgets/instantaneous_velocity.html",
    "href": "archive/physics/widgets/instantaneous_velocity.html",
    "title": "To use this widget, click on: Run > Run All Cells, then scroll down and move the sliders",
    "section": "",
    "text": "%matplotlib widget\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport ipywidgets as widgets\nfrom ipywidgets import interactive\nimport seaborn as sns\nsns.set(style=\"ticks\", font_scale=1.5)\n\n\nfig, ax = plt.subplots(figsize=(9,6))\nt = np.linspace(-5, 20, 101)\nfoo = lambda t: (t**3 - 15*t**2 + 300) / 100\nx = foo(t)\nTmiddle = 15\ndeltaT = 5\n\nax.set(xlim=[-5,20],\n       ylim=[-5,20],\n       ylabel=\"y\",\n       xticks=np.arange(-5,21,5),\n       xlabel=\"time\",\n      )\nax.set_ylabel(\"x(t)\", rotation=\"horizontal\",labelpad=15)\n\n\ndef plot_all_lines(T, dt):\n    ax.plot(t, x, color=\"red\", lw=3)\n    t0 = T - dt/2\n    t1 = T + dt/2\n    x0 = foo(t0)\n    x1 = foo(t1)\n    ax.plot([t0,t1], [x0,x1], color=\"blue\", lw=2)\n    \n    ax.plot([t0,t1], [x0,x0], color=\"gray\")\n    ax.plot([t1,t1], [x0,x1], color=\"gray\")\n    ax.text(T, x0, r\"$\\Delta t$\", fontsize=20, va=\"top\")\n    ax.text(t1, (x1+x0)/2, r\"$\\Delta x$\", fontsize=20)\n    \n    slope = (3*T**2 - 30*T) / 100\n    intercept = foo(T) - slope*T\n    Tmin = -100\n    Tmax = 100\n    line = lambda t: slope*t + intercept\n    ax.plot([Tmin, Tmax], [line(Tmin), line(Tmax)],\n            color=\"black\", ls=\":\")\n    \nplot_all_lines(Tmiddle, deltaT)\n\n@widgets.interact(Tmiddle=(-4, 17, 0.5), deltaT=(0, 8, 0.2))\ndef update(Tmiddle = 15, deltaT = 5):\n    \"\"\"Remove old lines from plot and plot new one\"\"\"\n    [l.remove() for l in ax.lines]\n    [l.remove() for l in ax.lines]\n    [l.remove() for l in ax.lines]\n    [l.remove() for l in ax.texts]\n    [l.remove() for l in ax.texts]\n    plot_all_lines(Tmiddle, deltaT)"
  },
  {
    "objectID": "archive/physics/widgets/instantaneous_velocity.html#to-use-this-widget-click-on-run-run-all-cells-then-scroll-down-and-move-the-sliders",
    "href": "archive/physics/widgets/instantaneous_velocity.html#to-use-this-widget-click-on-run-run-all-cells-then-scroll-down-and-move-the-sliders",
    "title": "To use this widget, click on: Run > Run All Cells, then scroll down and move the sliders",
    "section": "",
    "text": "%matplotlib widget\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport ipywidgets as widgets\nfrom ipywidgets import interactive\nimport seaborn as sns\nsns.set(style=\"ticks\", font_scale=1.5)\n\n\nfig, ax = plt.subplots(figsize=(9,6))\nt = np.linspace(-5, 20, 101)\nfoo = lambda t: (t**3 - 15*t**2 + 300) / 100\nx = foo(t)\nTmiddle = 15\ndeltaT = 5\n\nax.set(xlim=[-5,20],\n       ylim=[-5,20],\n       ylabel=\"y\",\n       xticks=np.arange(-5,21,5),\n       xlabel=\"time\",\n      )\nax.set_ylabel(\"x(t)\", rotation=\"horizontal\",labelpad=15)\n\n\ndef plot_all_lines(T, dt):\n    ax.plot(t, x, color=\"red\", lw=3)\n    t0 = T - dt/2\n    t1 = T + dt/2\n    x0 = foo(t0)\n    x1 = foo(t1)\n    ax.plot([t0,t1], [x0,x1], color=\"blue\", lw=2)\n    \n    ax.plot([t0,t1], [x0,x0], color=\"gray\")\n    ax.plot([t1,t1], [x0,x1], color=\"gray\")\n    ax.text(T, x0, r\"$\\Delta t$\", fontsize=20, va=\"top\")\n    ax.text(t1, (x1+x0)/2, r\"$\\Delta x$\", fontsize=20)\n    \n    slope = (3*T**2 - 30*T) / 100\n    intercept = foo(T) - slope*T\n    Tmin = -100\n    Tmax = 100\n    line = lambda t: slope*t + intercept\n    ax.plot([Tmin, Tmax], [line(Tmin), line(Tmax)],\n            color=\"black\", ls=\":\")\n    \nplot_all_lines(Tmiddle, deltaT)\n\n@widgets.interact(Tmiddle=(-4, 17, 0.5), deltaT=(0, 8, 0.2))\ndef update(Tmiddle = 15, deltaT = 5):\n    \"\"\"Remove old lines from plot and plot new one\"\"\"\n    [l.remove() for l in ax.lines]\n    [l.remove() for l in ax.lines]\n    [l.remove() for l in ax.lines]\n    [l.remove() for l in ax.texts]\n    [l.remove() for l in ax.texts]\n    plot_all_lines(Tmiddle, deltaT)"
  },
  {
    "objectID": "archive/physics/widgets/max_range_alpha.html",
    "href": "archive/physics/widgets/max_range_alpha.html",
    "title": "To use this widget, click on: Run > Run All Cells, then scroll down and move the sliders",
    "section": "",
    "text": "%matplotlib widget\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport ipywidgets as widgets\nfrom ipywidgets import interactive\nimport seaborn as sns\nsns.set(style=\"ticks\", font_scale=1.5)\n\n\npi = np.pi\ng = 9.8 \nfig, (ax0, ax1) = plt.subplots(1, 2, figsize=(9,5))\nfig.subplots_adjust(left=0.02, right=0.90, top=0.99, bottom=0.16,\n                    hspace=0.05, wspace=0.02)\nx = np.linspace(-2,18,501)\nt = np.linspace(0,5,101)\ng = 9.8\nv0 = 10.0\nalpha0 = 0.1*pi\n\na = np.linspace(0, pi/2, 101)\n\ndef trajectory(x, alpha, v0):\n    return np.tan(alpha)*x - (g/(2*v0**2*(np.cos(alpha))**2)*x**2)\n\ndef max_range_func(a, v0):\n    return v0**2 * np.sin(2*a) / g\n\ndef max_range(alpha, v0):\n    return v0**2 * np.sin(2*alpha) / g\n\nxoft = lambda alpha: v0*np.cos(alpha)*t\nyoft = lambda alpha: v0*np.sin(alpha)*t - g*t**2/2\ny = trajectory(x, alpha0, v0)\nax0.fill_between(x,y1=0,y2=-10, color=\"xkcd:grass\", zorder=10)\nax0.fill_between(x,y1=0,y2=12, color=\"xkcd:sky\", zorder=-10)\nax0.scatter(9, 9, s=4000, facecolor=\"yellow\")\n\ndef plot_left(ax, alpha, v0):\n    ax.plot(x, trajectory(x, alpha, v0), color=\"red\", lw=3)\n    make_arrow(ax, v0, alpha)\n    ax.plot([max_range(alpha, v0)], [0], 'o', zorder=10,\n            markerfacecolor=\"white\", markeredgecolor=\"black\", markersize=10, markeredgewidth=3)\n\ndef plot_right(ax, alpha, v0):\n    mr = max_range(alpha, v0)\n    ax.plot(a, max_range_func(a, v0), color=\"tab:red\", lw=3)\n    ax.plot([alpha], mr, 'o', clip_on = False, \n            markerfacecolor=\"white\", markeredgecolor=\"black\", markersize=10, markeredgewidth=3)\n    ax.plot(a, a*0 + mr, color=\"black\", ls=\":\", zorder=0)\n    ax.plot([alpha]*2, [0, mr], color=\"black\", ls=\":\", zorder=0)\n\ndef make_arrow(ax, v, alpha):\n    vx = v * np.cos(alpha)\n    vy = v * np.sin(alpha)\n    ax.ann = ax.annotate(\"\", xytext=(0, 0), xy=(vx*0.6, vy*0.6), zorder=0,\n                arrowprops=dict(facecolor='black',\n                                connectionstyle=\"arc3\",\n                                arrowstyle=\"simple\",)\n               )\n    ax.v0text = ax.text(vx*0.6, vy*0.6, r\"$\\vec{v}$\", fontsize=20)\n\nplot_right(ax1, alpha0, v0)\nplot_left(ax0, alpha0, v0)\n\nax0.set(xlim=[-2, 12],\n        ylim=[-2, 12],\n        xticks=np.arange(0,11,2),\n        yticks=[],\n        xlabel=\"x (m)\"\n       )\n\nax1.set(xlim=[0, pi/2],\n        ylim=[0, 11],\n        xticks=[0, pi/4, pi/2],\n        xticklabels=['0', r'$\\frac{\\pi}{4}$', r'$\\frac{\\pi}{2}$'],\n        xlabel=r\"angle, $\\alpha$\",\n        ylabel=\"horizontal range, L (m)\"\n       )\nax1.yaxis.set_label_position(\"right\")\nax1.yaxis.tick_right()\n\nax1.text(0, 10, r\"$ L=\\frac{v_0^2 \\sin(2\\alpha)}{g}$\")\n\n@widgets.interact(alpha=(0, 1.57, 0.01), v0=(0.1, 10.0-0.1, 0.1))\ndef update(alpha = pi*0.1, v0 = 10):\n    \"\"\"Remove old lines from plot and plot new one\"\"\"\n    [l.remove() for l in ax0.lines]\n    [l.remove() for l in ax0.lines]\n    ax0.ann.remove()\n    ax0.v0text.remove()\n    plot_left(ax0, alpha, v0)\n    [l.remove() for l in ax1.lines]\n    [l.remove() for l in ax1.lines]\n    [l.remove() for l in ax1.lines]\n    plot_right(ax1, alpha, v0)"
  },
  {
    "objectID": "archive/physics/widgets/max_range_alpha.html#to-use-this-widget-click-on-run-run-all-cells-then-scroll-down-and-move-the-sliders",
    "href": "archive/physics/widgets/max_range_alpha.html#to-use-this-widget-click-on-run-run-all-cells-then-scroll-down-and-move-the-sliders",
    "title": "To use this widget, click on: Run > Run All Cells, then scroll down and move the sliders",
    "section": "",
    "text": "%matplotlib widget\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport ipywidgets as widgets\nfrom ipywidgets import interactive\nimport seaborn as sns\nsns.set(style=\"ticks\", font_scale=1.5)\n\n\npi = np.pi\ng = 9.8 \nfig, (ax0, ax1) = plt.subplots(1, 2, figsize=(9,5))\nfig.subplots_adjust(left=0.02, right=0.90, top=0.99, bottom=0.16,\n                    hspace=0.05, wspace=0.02)\nx = np.linspace(-2,18,501)\nt = np.linspace(0,5,101)\ng = 9.8\nv0 = 10.0\nalpha0 = 0.1*pi\n\na = np.linspace(0, pi/2, 101)\n\ndef trajectory(x, alpha, v0):\n    return np.tan(alpha)*x - (g/(2*v0**2*(np.cos(alpha))**2)*x**2)\n\ndef max_range_func(a, v0):\n    return v0**2 * np.sin(2*a) / g\n\ndef max_range(alpha, v0):\n    return v0**2 * np.sin(2*alpha) / g\n\nxoft = lambda alpha: v0*np.cos(alpha)*t\nyoft = lambda alpha: v0*np.sin(alpha)*t - g*t**2/2\ny = trajectory(x, alpha0, v0)\nax0.fill_between(x,y1=0,y2=-10, color=\"xkcd:grass\", zorder=10)\nax0.fill_between(x,y1=0,y2=12, color=\"xkcd:sky\", zorder=-10)\nax0.scatter(9, 9, s=4000, facecolor=\"yellow\")\n\ndef plot_left(ax, alpha, v0):\n    ax.plot(x, trajectory(x, alpha, v0), color=\"red\", lw=3)\n    make_arrow(ax, v0, alpha)\n    ax.plot([max_range(alpha, v0)], [0], 'o', zorder=10,\n            markerfacecolor=\"white\", markeredgecolor=\"black\", markersize=10, markeredgewidth=3)\n\ndef plot_right(ax, alpha, v0):\n    mr = max_range(alpha, v0)\n    ax.plot(a, max_range_func(a, v0), color=\"tab:red\", lw=3)\n    ax.plot([alpha], mr, 'o', clip_on = False, \n            markerfacecolor=\"white\", markeredgecolor=\"black\", markersize=10, markeredgewidth=3)\n    ax.plot(a, a*0 + mr, color=\"black\", ls=\":\", zorder=0)\n    ax.plot([alpha]*2, [0, mr], color=\"black\", ls=\":\", zorder=0)\n\ndef make_arrow(ax, v, alpha):\n    vx = v * np.cos(alpha)\n    vy = v * np.sin(alpha)\n    ax.ann = ax.annotate(\"\", xytext=(0, 0), xy=(vx*0.6, vy*0.6), zorder=0,\n                arrowprops=dict(facecolor='black',\n                                connectionstyle=\"arc3\",\n                                arrowstyle=\"simple\",)\n               )\n    ax.v0text = ax.text(vx*0.6, vy*0.6, r\"$\\vec{v}$\", fontsize=20)\n\nplot_right(ax1, alpha0, v0)\nplot_left(ax0, alpha0, v0)\n\nax0.set(xlim=[-2, 12],\n        ylim=[-2, 12],\n        xticks=np.arange(0,11,2),\n        yticks=[],\n        xlabel=\"x (m)\"\n       )\n\nax1.set(xlim=[0, pi/2],\n        ylim=[0, 11],\n        xticks=[0, pi/4, pi/2],\n        xticklabels=['0', r'$\\frac{\\pi}{4}$', r'$\\frac{\\pi}{2}$'],\n        xlabel=r\"angle, $\\alpha$\",\n        ylabel=\"horizontal range, L (m)\"\n       )\nax1.yaxis.set_label_position(\"right\")\nax1.yaxis.tick_right()\n\nax1.text(0, 10, r\"$ L=\\frac{v_0^2 \\sin(2\\alpha)}{g}$\")\n\n@widgets.interact(alpha=(0, 1.57, 0.01), v0=(0.1, 10.0-0.1, 0.1))\ndef update(alpha = pi*0.1, v0 = 10):\n    \"\"\"Remove old lines from plot and plot new one\"\"\"\n    [l.remove() for l in ax0.lines]\n    [l.remove() for l in ax0.lines]\n    ax0.ann.remove()\n    ax0.v0text.remove()\n    plot_left(ax0, alpha, v0)\n    [l.remove() for l in ax1.lines]\n    [l.remove() for l in ax1.lines]\n    [l.remove() for l in ax1.lines]\n    plot_right(ax1, alpha, v0)"
  },
  {
    "objectID": "group.html",
    "href": "group.html",
    "title": " Group",
    "section": "",
    "text": "Yair Mau\nPrincipal Investigator\n\nProblems worthy of attack prove their worth by fighting back.\n— Piet Hein\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nErez Feuer\nPhD student\nplant responses to drought and heatwaves\n\n\n\n\n\n\n\n\n\n\n\n\n\nNurit Goldberg\nPhD student\nsoil compaction, soil salinization\n\n\n\n\n\n\n\nFormer members\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIsaac Kramer\n2018–2022, PhD student\nsoil salinization, irreversible soil degradation processes, sustainable resource use\nwebsite\n\n\n\n\n\n\n\n\n\n\n\n\n\nLaura Rez\n2020–2022, MSc student\nplant water fluxes, heatwave impact on fruit trees\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYuval Bayer\n2020–2022, BSc Amirim project\nOptimal stomatal control\n\n\n\n\n\n\n\n\n\n\n\n\n\nAvi Gross\n2018–2020, MSc student\nPlant water storage dynamics\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTaiwo Adeyemo\n2018–2020, MSc student\nIrreversible soil degradation\n\n\n\n\n\n\n\n\n\n\n\n\n\nAvigail Kaner\n2017–2021, Research Specialist\n\n\n\n\n\n\n\nTheory is when you know everything but nothing works. Praxis is when everything works but no one knows why. In our lab, theory and praxis are combined: nothing works and no one knows why.\n— Unknown"
  },
  {
    "objectID": "more/index.html",
    "href": "more/index.html",
    "title": " More",
    "section": "",
    "text": "Python tutorial\n Quotes\n Science Communication\n Talks\n Blog\nHow I made this website\nThis website was build using Quarto, edited on VSCode, hosted on Github Pages. The code for the whole website can be found on this GitHub repository.\n\nComputers are useless. They can only give you answers.\n— Pablo Picasso"
  },
  {
    "objectID": "more/communication.html",
    "href": "more/communication.html",
    "title": " Science Communication",
    "section": "",
    "text": "Talks\nA scientific talk is not a scientific paper, it is a completely different medium! Here are a few tips that I find useful.\nHow To Give a Talk\n[How To Give a Talk, by David L Stern.]\nExcerpt:\n\nPrinciple 1 - Don’t Put Words On Slides\nIt may not seem intuitive, but including words on slides has a bigger detrimental effect on the quality of a talk than any other issue I will address.\n\n\nThe slides in most science talks contain many words. This simple fact has many consequences, none positive. Most obviously, words on slides impel listeners to read the words on the slide. If you are talking while they are reading, then you generate cognitive dissonance that makes it difficult for the audience to understand either your spoken words or your written words. So, if you want your audience to read the words on a slide, then, presumably, you should shut up. But, I don’t recommend that. Instead, just cut all the words form your slides.\n\nThe David Attenborough Style of Scientific Presentation\n[The David Attenborough Style of Scientific Presentation.]\nExcerpt:\n\nGet into this mindset: your main job is to be an entertainer, not a scientist. Most scientists don’t do this, which is why most scientific talks are bad. The fact of the matter is that if the audience doesn’t understand and enjoy your talk, they won’t care if your science is good.\n\nA LaTeX template\nCheck out a nice LaTeX template for presentations [here].\n\nVisualizations\nVisualizations can take a message very, very far. I put a lot of thinking into how to best express an idea. I believe that great graphs greatly improve a scientific paper, and a thoughful graph/animation surely brings home the main point of a talk. Here are a few thoughts on visualizations.\nInspiration\n\nHans Rosling, Gapminder\nMax Roser, Our World in Data\nStephen Malinowski, Music Animation Machine\nThe Economist, Daily Chart\n\nColors\nDon’t use the rainbow color map.\nWhy? [Read this], by Robert Kosara.\nSo how should you choose the colors for a graph?\n\nVisit colorbrewer. It gives sequential, diverging and qualitative colormaps that can be chosen to be “colorblind safe”, “print safe”, or “photocopy safe”. Usually, it is the first and only tool I use. It’s just great!\nVisit Adobe Color CC. It gives you much more freedom to play with the colors than colorbrewer. Use it wisely!\n\nMore on color: read Subtleties of Color, by Robert Simmon.\nBrowse for ideas\n\nThe Data Visualisation Catalogue"
  },
  {
    "objectID": "courses/index.html",
    "href": "courses/index.html",
    "title": " Courses",
    "section": "",
    "text": "Surface Hydrology\n Agrotech Lab\n Time Series Analysis\n Physics 1\n\nTrue science teaches, above all, to doubt and to be ignorant.\n— Miguel de Unamuno"
  },
  {
    "objectID": "courses/physics1/gifs/energy.html",
    "href": "courses/physics1/gifs/energy.html",
    "title": "Energy",
    "section": "",
    "text": "https://youtu.be/iN1beukMJJc"
  },
  {
    "objectID": "courses/physics1/gifs/energy.html#elastic-energy",
    "href": "courses/physics1/gifs/energy.html#elastic-energy",
    "title": "Energy",
    "section": "",
    "text": "https://youtu.be/iN1beukMJJc"
  },
  {
    "objectID": "courses/physics1/gifs/energy.html#potential-and-kinetic-energy",
    "href": "courses/physics1/gifs/energy.html#potential-and-kinetic-energy",
    "title": "Energy",
    "section": "Potential and Kinetic Energy",
    "text": "Potential and Kinetic Energy\n\nVisualization of conservation of energy\n\n\n\n\nHigh road low road track race, potential-kinetic energy tracks\nhttps://youtu.be/_GJujClGYJQ\n\n\nMondo Duplantis 2018, play at 0.25 speed\n\n\n\n\n150 Ton Hydraulic Guillotine Vs Deck of Cards"
  },
  {
    "objectID": "courses/physics1/gifs/linear-momentum.html#elastic-collisions",
    "href": "courses/physics1/gifs/linear-momentum.html#elastic-collisions",
    "title": "Linear Momentum & Center of Mass",
    "section": "Elastic collisions",
    "text": "Elastic collisions\n\nfailed collision\n\n\n\n\nbullets ricochet off water\n\n\n\n\nperiodic billiard collision\n\n\n\n\nAlthea Reinhardt’s face save\n{% twitter https://twitter.com/BeardedGenius/status/1472221793595310084 %}"
  },
  {
    "objectID": "courses/physics1/gifs/linear-momentum.html#inelastic-collisions",
    "href": "courses/physics1/gifs/linear-momentum.html#inelastic-collisions",
    "title": "Linear Momentum & Center of Mass",
    "section": "Inelastic collisions",
    "text": "Inelastic collisions\n\nApple collision at 90 km/h."
  },
  {
    "objectID": "courses/physics1/gifs/linear-momentum.html#center-of-mass",
    "href": "courses/physics1/gifs/linear-momentum.html#center-of-mass",
    "title": "Linear Momentum & Center of Mass",
    "section": "Center of mass",
    "text": "Center of mass\n\ncenter of mass parabolic trajectory\n\n\n\n\nJosh Imatorbhebhe vertical jump"
  },
  {
    "objectID": "courses/physics1/gifs/linear-momentum.html#internal-vs-external-forces",
    "href": "courses/physics1/gifs/linear-momentum.html#internal-vs-external-forces",
    "title": "Linear Momentum & Center of Mass",
    "section": "Internal vs external forces",
    "text": "Internal vs external forces\n\nHow to push your pickup truck"
  },
  {
    "objectID": "courses/physics1/gifs/kinematics.html",
    "href": "courses/physics1/gifs/kinematics.html",
    "title": "Kinematics",
    "section": "",
    "text": "firefighting airplanes in action, dogs jumping into a car, woman walking the wrong way"
  },
  {
    "objectID": "courses/physics1/gifs/kinematics.html#motivation-for-studying-kinematics",
    "href": "courses/physics1/gifs/kinematics.html#motivation-for-studying-kinematics",
    "title": "Kinematics",
    "section": "",
    "text": "firefighting airplanes in action, dogs jumping into a car, woman walking the wrong way"
  },
  {
    "objectID": "courses/physics1/gifs/kinematics.html#x-and-y-movements-are-independent",
    "href": "courses/physics1/gifs/kinematics.html#x-and-y-movements-are-independent",
    "title": "Kinematics",
    "section": "X and Y movements are independent",
    "text": "X and Y movements are independent\n\n\n\n\n\n\n\n\n\n\n\n\n#PhysicsFactlet (179)The rate of change of position is velocity.The rate of change of velocity is acceleration.The rate of change of acceleration is jerk.The rate of change of jerk is jounce.The rate of change of jounce is crackle.The rate of change of crackle is pop.\n\n— Jacopo Bertolotti (@j_bertolotti) October 8, 2019"
  },
  {
    "objectID": "courses/physics1/gifs/kinematics.html#d-kinematics",
    "href": "courses/physics1/gifs/kinematics.html#d-kinematics",
    "title": "Kinematics",
    "section": "2d kinematics",
    "text": "2d kinematics\n\nHarlem Globetrotter Makes Incredible Trick Shot From Plane Flying 70 MPH\n\n\n\n\njumping goats\n\n\n\n\nKevin failed Physics\n\n\nYes, Kevin failed physics and math, but he knew how to build a helluva ramp! 🍺 🥴 pic.twitter.com/8rPrtRmCYy\n\n— 🍺 Hold My Beer 🍺 (@HldMyBeer) August 31, 2021"
  },
  {
    "objectID": "courses/physics1/gifs/kinematics.html#galilean-relativity",
    "href": "courses/physics1/gifs/kinematics.html#galilean-relativity",
    "title": "Kinematics",
    "section": "Galilean relativity",
    "text": "Galilean relativity\n\nswimming against the current\n\n\n\n\nMythbusters - Soccer Ball Shot from Truck\nhttps://youtu.be/BLuI118nhzc"
  },
  {
    "objectID": "courses/physics1/gifs/kinematics.html#circular-motion",
    "href": "courses/physics1/gifs/kinematics.html#circular-motion",
    "title": "Kinematics",
    "section": "Circular motion",
    "text": "Circular motion\n\nHamster, from https://twitter.com/SJSchauer/status/1186484325451227136?s=09\n\n\n\n\nHuman Loop the Loop with Damien Walters\n\n\n\n\nBall in a pie pan: Testing Experiment\n\n\n\n\nBeer flipping\n\n\n\n\n2001: A Space Odyssey\n\n\n\n\nCentripetal force\nMany forces can take the role of the centripetal force."
  },
  {
    "objectID": "courses/physics1/gifs/newtons-laws.html#newtons-second-law",
    "href": "courses/physics1/gifs/newtons-laws.html#newtons-second-law",
    "title": "Newton’s Laws",
    "section": "Newton’s second law",
    "text": "Newton’s second law\n\nMan with superhuman strength\n\n\n\n\nInside the ISS\n\n\n\nWhack-a-Stack\n\n\n\n\nApollo 15 hammer-feather drop"
  },
  {
    "objectID": "courses/physics1/gifs/newtons-laws.html#newtons-third-law",
    "href": "courses/physics1/gifs/newtons-laws.html#newtons-third-law",
    "title": "Newton’s Laws",
    "section": "Newton’s third law",
    "text": "Newton’s third law\n\nNewton cartoon\n\n\n\nMotorcycle kicks car"
  },
  {
    "objectID": "courses/physics1/gifs/newtons-laws.html#friction",
    "href": "courses/physics1/gifs/newtons-laws.html#friction",
    "title": "Newton’s Laws",
    "section": "Friction",
    "text": "Friction\n\nStatic friction\n\n\n\n\nStatic vs. kinetic friction\n\n\n\n\nNo friction on inclined plane\n\n\n\n\nCat fails to jump, not enough friction\n\n\n\n\nSpidergirl"
  },
  {
    "objectID": "courses/physics1/extra/extra-units.html",
    "href": "courses/physics1/extra/extra-units.html",
    "title": "Extra materials - Units",
    "section": "",
    "text": "Units for three SI base quantities\n\n\n\nQuantity\nUnit Name\nUnit Symbol\n\n\n\n\nLength [L]\nmeter\nm\n\n\nTime [T]\nsecond\ns\n\n\nMass [M]\nkilogram\nkg\n\n\n\nSome prefixes for SI Units that you must remember!\n\n\n\nFactor\nPrefix\nSymbol\n\n\n\n\n\\(10^9\\)\ngiga-\nG\n\n\n\\(10^6\\)\nmega-\nM\n\n\n\\(10^3\\)\nkilo-\nk\n\n\n\\(10^{-2}\\)\ncenti-\nc\n\n\n\\(10^{-3}\\)\nmilli-\nm\n\n\n\\(10^{-6}\\)\nmicro-\n\\(\\mu\\)\n\n\n\\(10^{-9}\\)\nnano-\nn"
  },
  {
    "objectID": "courses/physics1/extra/extra-units.html#basic-units-and-prefixes",
    "href": "courses/physics1/extra/extra-units.html#basic-units-and-prefixes",
    "title": "Extra materials - Units",
    "section": "",
    "text": "Units for three SI base quantities\n\n\n\nQuantity\nUnit Name\nUnit Symbol\n\n\n\n\nLength [L]\nmeter\nm\n\n\nTime [T]\nsecond\ns\n\n\nMass [M]\nkilogram\nkg\n\n\n\nSome prefixes for SI Units that you must remember!\n\n\n\nFactor\nPrefix\nSymbol\n\n\n\n\n\\(10^9\\)\ngiga-\nG\n\n\n\\(10^6\\)\nmega-\nM\n\n\n\\(10^3\\)\nkilo-\nk\n\n\n\\(10^{-2}\\)\ncenti-\nc\n\n\n\\(10^{-3}\\)\nmilli-\nm\n\n\n\\(10^{-6}\\)\nmicro-\n\\(\\mu\\)\n\n\n\\(10^{-9}\\)\nnano-\nn"
  },
  {
    "objectID": "courses/physics1/extra/extra-units.html#exponent-rules",
    "href": "courses/physics1/extra/extra-units.html#exponent-rules",
    "title": "Extra materials - Units",
    "section": "exponent rules",
    "text": "exponent rules"
  },
  {
    "objectID": "courses/physics1/extra/extra-units.html#volume-and-surface-area",
    "href": "courses/physics1/extra/extra-units.html#volume-and-surface-area",
    "title": "Extra materials - Units",
    "section": "volume and surface area",
    "text": "volume and surface area"
  },
  {
    "objectID": "courses/physics1/extra/extra-units.html#horse-sized-duck-or-100-duck-sized-horses",
    "href": "courses/physics1/extra/extra-units.html#horse-sized-duck-or-100-duck-sized-horses",
    "title": "Extra materials - Units",
    "section": "1 horse-sized duck or 100 duck-sized horses?",
    "text": "1 horse-sized duck or 100 duck-sized horses?"
  },
  {
    "objectID": "courses/physics1/extra/extra-momentum.html#momentum-lecture-2",
    "href": "courses/physics1/extra/extra-momentum.html#momentum-lecture-2",
    "title": "Extra materials - Momentum",
    "section": "Momentum, Lecture 2",
    "text": "Momentum, Lecture 2\n\n\nVideos of people flying backwards after being shot: * Bruce Willis (watch the few first seconds) * Uma Thurman * Morgan Freeman (watch from 1:10)"
  },
  {
    "objectID": "courses/physics1/extra/extra-momentum.html#momentum-lecture-3",
    "href": "courses/physics1/extra/extra-momentum.html#momentum-lecture-3",
    "title": "Extra materials - Momentum",
    "section": "Momentum, Lecture 3",
    "text": "Momentum, Lecture 3\n\n\nVideos of a Newton’s Cradle * Newton’s Cradle with a High-Speed Video Camera * Amazing Demonstration Of A Giant Newton’s Cradle!"
  },
  {
    "objectID": "tutorials/python/histograms.html",
    "href": "tutorials/python/histograms.html",
    "title": "Fun with histograms",
    "section": "",
    "text": "1d and 2d histograms\n\n\n\n\nThis code produces the figure above. I tried to showcase a few things one can do with 1d and 2d histograms.\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.gridspec as gridspec\nimport scipy.special\nfrom scipy.optimize import curve_fit\nimport seaborn as sns\nsns.set(style=\"ticks\", font_scale=1.5)\n\n\nfig = plt.figure(1, figsize=(8,6))  # figsize accepts only inches.\n\n##################################\n# Panels on the left of the figure\n##################################\n\ngs = gridspec.GridSpec(2, 2, width_ratios=[1, 0.2], height_ratios=[0.2, 1])\ngs.update(left=0.10, right=0.50, top=0.95, bottom=0.13,\n          hspace=0.02, wspace=0.02)\n\nsigma = 1.0  # standard deviation (spread)\nmu = 0.0  # mean (center) of the distribution\nx = np.random.normal(loc=mu, scale=sigma, size=5000)\nk = 2.0  # shape\ntheta = 1.0  # scale\ny = np.random.gamma(shape=k, scale=theta, size=5000)\n\n# bottom left panel\nax10 = plt.subplot(gs[1, 0])\ncounts, xedges, yedges, image = ax10.hist2d(x, y, bins=40, cmap=\"YlOrRd\",\n                                            density=True)\ndx = xedges[1] - xedges[0]\ndy = yedges[1] - yedges[0]\nxvec = xedges[:-1] + dx / 2\nyvec = yedges[:-1] + dy / 2\nax10.set_xlabel(r\"$x$\")\nax10.set_ylabel(r\"$y$\", rotation=\"horizontal\")\nax10.text(-2, 8, r\"$p(x,y)$\")\nax10.set_xlim([xedges.min(), xedges.max()])\nax10.set_ylim([yedges.min(), yedges.max()])\n\n# top left panel\nax00 = plt.subplot(gs[0, 0])\ngaussian = (1.0 / np.sqrt(2.0 * np.pi * sigma ** 2)) * \\\n    np.exp(-((xvec - mu) ** 2) / (2.0 * sigma ** 2))\nxdist = counts.sum(axis=1) * dy\nax00.bar(xvec, xdist, width=dx, fill=False,\n         edgecolor='black', alpha=0.8)\nax00.plot(xvec, gaussian, color='black')\nax00.set_xlim([xedges.min(), xedges.max()])\nax00.set_xticklabels([])\nax00.set_yticks([])\nax00.set_xlabel(\"Normal distribution\", fontsize=16)\nax00.xaxis.set_label_position(\"top\")\nax00.set_ylabel(r\"$p(x)$\", rotation=\"horizontal\", labelpad=20)\n\n# bottom right panel\nax11 = plt.subplot(gs[1, 1])\ngamma_dist = yvec ** (k - 1.0) * np.exp(-yvec / theta) / \\\n    (theta ** k * scipy.special.gamma(k))\nydist = counts.sum(axis=0) * dx\nax11.barh(yvec, ydist, height=dy, fill=False,\n          edgecolor='black', alpha=0.8)\nax11.plot(gamma_dist, yvec, color='black')\nax11.set_ylim([yedges.min(), yedges.max()])\nax11.set_xticks([])\nax11.set_yticklabels([])\nax11.set_ylabel(\"Gamma distribution\", fontsize=16)\nax11.yaxis.set_label_position(\"right\")\nax11.set_xlabel(r\"$p(y)$\")\nax11.xaxis.set_label_position(\"top\")\n\n###################################\n# Panels on the right of the figure\n###################################\n\ngs2 = gridspec.GridSpec(2, 1, width_ratios=[1], height_ratios=[1, 1])\ngs2.update(left=0.60, right=0.98, top=0.95, bottom=0.13,\n           hspace=0.02, wspace=0.05)\n\nx = np.random.normal(loc=0, scale=1, size=1000)\ny = np.random.gamma(shape=2, size=1000)\n\nbx10 = plt.subplot(gs2[1, 0])\nbx00 = plt.subplot(gs2[0, 0])\n\nN = 100\na = np.random.gamma(shape=5, size=N)\nmy_bins = np.arange(0,15,1.5)\nn1, bins1, patches1 = bx00.hist(a, bins=my_bins, density=True,\n                                histtype='stepfilled', alpha=0.2, hatch='/')\nbx00.set_xlim([0, 15])\nbx00.set_ylim([0, 0.28])\nbx00.set_xticklabels([])\nbx00.set_xlabel(\"plt.hist\", fontfamily=\"monospace\")\nbx00.xaxis.set_label_position(\"top\")\n\n# the following way is equivalent to plt.hist, but it gives\n# the user more flexibility when plotting and analysing the results\nn2, bins2 = np.histogram(a, bins=my_bins, density=True)\nwid = bins2[1] - bins2[0]\nred, = bx10.plot(bins2[:-1]+wid/2, n2, marker='o', color='red')\nbx10.bar(bins2[:-1], n2, width=wid, fill=False,\n         edgecolor='black', linewidth=3, alpha=0.8, align=\"edge\")\nbx10.set_xlim([0, 15])\nbx10.set_ylim([0, 0.28])\nbx10.set_xlabel(r\"np.histogram;  plt.bar\", fontfamily=\"monospace\")\n\n# best fit\n\nxdata = my_bins[:-1] + wid/2\nydata = n2\ndef func(x, p1, p2):\n    return x ** (p1 - 1.0) * np.exp(-x / p2) / (p2 ** p1 * scipy.special.gamma(p1))\npopt, pcov = curve_fit(func, xdata, ydata, p0=(1.5, 1.5))  # p0 = initial guess\np1, p2 = popt\nSStot = ((ydata - ydata.mean()) ** 2).sum()\nSSres = ((ydata - func(xdata, p1, p2)) ** 1).sum()\nRsquared = 1 - SSres / SStot\nh = np.linspace(0,15,101)\nbx00.plot(h, func(h, p1, p2), color='blue', linewidth=2)\n# dummy plot, just so we can have a legend on the bottom panel\nblue, = ax10.plot([100],[100], color='blue', linewidth=2, label=\"Best fit\")\nbx10.legend([red,blue],[r'Data',r'Best fit, $r^2=${:.2f}'.format(Rsquared)],\n            loc='upper right', frameon=False, handlelength=4,\n            markerfirst=False, numpoints=3, fontsize=14)\n\nfig.savefig(\"histograms.png\",dpi=300)"
  },
  {
    "objectID": "tutorials/python/histograms.html#introduction",
    "href": "tutorials/python/histograms.html#introduction",
    "title": "Fun with histograms",
    "section": "",
    "text": "This code produces the figure above. I tried to showcase a few things one can do with 1d and 2d histograms."
  },
  {
    "objectID": "tutorials/python/histograms.html#the-code",
    "href": "tutorials/python/histograms.html#the-code",
    "title": "Fun with histograms",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.gridspec as gridspec\nimport scipy.special\nfrom scipy.optimize import curve_fit\nimport seaborn as sns\nsns.set(style=\"ticks\", font_scale=1.5)\n\n\nfig = plt.figure(1, figsize=(8,6))  # figsize accepts only inches.\n\n##################################\n# Panels on the left of the figure\n##################################\n\ngs = gridspec.GridSpec(2, 2, width_ratios=[1, 0.2], height_ratios=[0.2, 1])\ngs.update(left=0.10, right=0.50, top=0.95, bottom=0.13,\n          hspace=0.02, wspace=0.02)\n\nsigma = 1.0  # standard deviation (spread)\nmu = 0.0  # mean (center) of the distribution\nx = np.random.normal(loc=mu, scale=sigma, size=5000)\nk = 2.0  # shape\ntheta = 1.0  # scale\ny = np.random.gamma(shape=k, scale=theta, size=5000)\n\n# bottom left panel\nax10 = plt.subplot(gs[1, 0])\ncounts, xedges, yedges, image = ax10.hist2d(x, y, bins=40, cmap=\"YlOrRd\",\n                                            density=True)\ndx = xedges[1] - xedges[0]\ndy = yedges[1] - yedges[0]\nxvec = xedges[:-1] + dx / 2\nyvec = yedges[:-1] + dy / 2\nax10.set_xlabel(r\"$x$\")\nax10.set_ylabel(r\"$y$\", rotation=\"horizontal\")\nax10.text(-2, 8, r\"$p(x,y)$\")\nax10.set_xlim([xedges.min(), xedges.max()])\nax10.set_ylim([yedges.min(), yedges.max()])\n\n# top left panel\nax00 = plt.subplot(gs[0, 0])\ngaussian = (1.0 / np.sqrt(2.0 * np.pi * sigma ** 2)) * \\\n    np.exp(-((xvec - mu) ** 2) / (2.0 * sigma ** 2))\nxdist = counts.sum(axis=1) * dy\nax00.bar(xvec, xdist, width=dx, fill=False,\n         edgecolor='black', alpha=0.8)\nax00.plot(xvec, gaussian, color='black')\nax00.set_xlim([xedges.min(), xedges.max()])\nax00.set_xticklabels([])\nax00.set_yticks([])\nax00.set_xlabel(\"Normal distribution\", fontsize=16)\nax00.xaxis.set_label_position(\"top\")\nax00.set_ylabel(r\"$p(x)$\", rotation=\"horizontal\", labelpad=20)\n\n# bottom right panel\nax11 = plt.subplot(gs[1, 1])\ngamma_dist = yvec ** (k - 1.0) * np.exp(-yvec / theta) / \\\n    (theta ** k * scipy.special.gamma(k))\nydist = counts.sum(axis=0) * dx\nax11.barh(yvec, ydist, height=dy, fill=False,\n          edgecolor='black', alpha=0.8)\nax11.plot(gamma_dist, yvec, color='black')\nax11.set_ylim([yedges.min(), yedges.max()])\nax11.set_xticks([])\nax11.set_yticklabels([])\nax11.set_ylabel(\"Gamma distribution\", fontsize=16)\nax11.yaxis.set_label_position(\"right\")\nax11.set_xlabel(r\"$p(y)$\")\nax11.xaxis.set_label_position(\"top\")\n\n###################################\n# Panels on the right of the figure\n###################################\n\ngs2 = gridspec.GridSpec(2, 1, width_ratios=[1], height_ratios=[1, 1])\ngs2.update(left=0.60, right=0.98, top=0.95, bottom=0.13,\n           hspace=0.02, wspace=0.05)\n\nx = np.random.normal(loc=0, scale=1, size=1000)\ny = np.random.gamma(shape=2, size=1000)\n\nbx10 = plt.subplot(gs2[1, 0])\nbx00 = plt.subplot(gs2[0, 0])\n\nN = 100\na = np.random.gamma(shape=5, size=N)\nmy_bins = np.arange(0,15,1.5)\nn1, bins1, patches1 = bx00.hist(a, bins=my_bins, density=True,\n                                histtype='stepfilled', alpha=0.2, hatch='/')\nbx00.set_xlim([0, 15])\nbx00.set_ylim([0, 0.28])\nbx00.set_xticklabels([])\nbx00.set_xlabel(\"plt.hist\", fontfamily=\"monospace\")\nbx00.xaxis.set_label_position(\"top\")\n\n# the following way is equivalent to plt.hist, but it gives\n# the user more flexibility when plotting and analysing the results\nn2, bins2 = np.histogram(a, bins=my_bins, density=True)\nwid = bins2[1] - bins2[0]\nred, = bx10.plot(bins2[:-1]+wid/2, n2, marker='o', color='red')\nbx10.bar(bins2[:-1], n2, width=wid, fill=False,\n         edgecolor='black', linewidth=3, alpha=0.8, align=\"edge\")\nbx10.set_xlim([0, 15])\nbx10.set_ylim([0, 0.28])\nbx10.set_xlabel(r\"np.histogram;  plt.bar\", fontfamily=\"monospace\")\n\n# best fit\n\nxdata = my_bins[:-1] + wid/2\nydata = n2\ndef func(x, p1, p2):\n    return x ** (p1 - 1.0) * np.exp(-x / p2) / (p2 ** p1 * scipy.special.gamma(p1))\npopt, pcov = curve_fit(func, xdata, ydata, p0=(1.5, 1.5))  # p0 = initial guess\np1, p2 = popt\nSStot = ((ydata - ydata.mean()) ** 2).sum()\nSSres = ((ydata - func(xdata, p1, p2)) ** 1).sum()\nRsquared = 1 - SSres / SStot\nh = np.linspace(0,15,101)\nbx00.plot(h, func(h, p1, p2), color='blue', linewidth=2)\n# dummy plot, just so we can have a legend on the bottom panel\nblue, = ax10.plot([100],[100], color='blue', linewidth=2, label=\"Best fit\")\nbx10.legend([red,blue],[r'Data',r'Best fit, $r^2=${:.2f}'.format(Rsquared)],\n            loc='upper right', frameon=False, handlelength=4,\n            markerfirst=False, numpoints=3, fontsize=14)\n\nfig.savefig(\"histograms.png\",dpi=300)"
  },
  {
    "objectID": "tutorials/python/streamplot.html#introduction",
    "href": "tutorials/python/streamplot.html#introduction",
    "title": "Streamplot",
    "section": "Introduction",
    "text": "Introduction\nStreamplot of a two-dimensional linear system, with eigenvectors and nullclines. Python shows LaTeX equations beautifully.\nMain features: meshgrid, streamplot, contour, legend, LaTeX"
  },
  {
    "objectID": "tutorials/python/streamplot.html#the-code",
    "href": "tutorials/python/streamplot.html#the-code",
    "title": "Streamplot",
    "section": "The code",
    "text": "The code\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"ticks\", font_scale=1.5)\n\nmake graph look pretty\n\n\n# learn how to configure:\n# http://matplotlib.sourceforge.net/users/customizing.html\nparams = {\n          'font.family': 'serif',\n          'ps.usedistiller': 'xpdf',\n          'text.usetex': True,\n          # include here any neede package for latex\n          'text.latex.preamble': r'\\usepackage{amsmath}',\n          }\nplt.rcParams.update(params)\n\ndefine parameters, system of equations, and equation for eigenvectors\n\n%matplotlib widget\nfig, ax = plt.subplots(figsize=(8,6))\nfig.subplots_adjust(left=0.08, right=0.68, top=0.87, bottom=0.10,\n                    hspace=0.02, wspace=0.02)\n# parameters as a dictionary\np = {'a': -1.0, 'b': +0.2,\n     'c': +1.2, 'd': -1.5}\n\n# the equations\ndef system_equations(x,y):\n    return [p['a'] * x + p['b'] * y,\n            p['c'] * x + p['d'] * y,\n           ]\n# eigenvectors\neigen_vec = 100 * np.array([            \n                           [(p['a'] - p['d'] -\n                            np.sqrt((p['a'] - p['d']) ** 2 +\n                                    4.0 * p['b'] * p['c'])) /\n                            (2.0 * p['c']), 1.0],\n                           [(p['a'] - p['d'] +\n                            np.sqrt((p['a'] - p['d']) ** 2 +\n                                    4.0 * p['b'] * p['c'])) /\n                            (2.0 * p['c']), 1.0],\n                           ])\n\nmin_x, max_x = [-1, 1]\nmin_y, max_y = [-4, 4]\ndivJ = 50j\ndiv = 50\n# 1st way\n# Y, X = np.mgrid[min_y:max_y:div,min_x:max_x:div]\n# 2nd way\nX, Y = np.meshgrid(np.linspace(min_x, max_x, div),\n                   np.linspace(min_y, max_y, div))\n\n# streamplot\ndensity = 2 * [0.80]\nminlength = 0.2\narrow_color = 3 * [0.5]\nax.streamplot(X, Y, system_equations(X, Y)[0], system_equations(X, Y)[1],\n              density=density, color=arrow_color, arrowsize=2,\n              linewidth=2, minlength=minlength)\n\n# eigenvectors\neigen_0, = ax.plot([eigen_vec[0, 0],-eigen_vec[0, 0]],\n                   [eigen_vec[0, 1],-eigen_vec[0, 1]],\n                   color='red', lw=3, ls=\"--\")\neigen_1, = ax.plot([eigen_vec[1, 0],-eigen_vec[1, 0]],\n                   [eigen_vec[1, 1],-eigen_vec[1, 1]],\n                   color='orange', lw=3, ls=\"--\")\ndash = (7, 2, 1, 2)\neigen_0.set_dashes(dash)\neigen_1.set_dashes(dash)\n\n# nullclines\nnull_0 = ax.contour(X, Y, system_equations(X, Y)[0],\n                    levels=[0], colors='black', linewidths=3)\nnull_1 = ax.contour(X, Y,system_equations(X, Y)[1],\n                    levels=[0], colors='blue', linewidths=3)\nn0, = ax.plot([100,101], [100,101], color='black', linewidth=3)\nn1, = ax.plot([100,101], [100,101], color='blue', linewidth=3)\n\n# some text\nax.text(0.0, 1.02, (r\"$\\displaystyle\\frac{d}{dt}\\begin{pmatrix}x\\\\y\\end{pmatrix}=$\"\n                    r\"$\\begin{pmatrix}a&b\\\\c&d\\end{pmatrix}\\cdot$\"\n                    r\"$\\begin{pmatrix}x\\\\y\\end{pmatrix}$\"),\n                    transform=ax.transAxes, va=\"bottom\")\nax.text(1.0, 1.1, r\"$a={:.1f}\\qquad b={:.1f}$\".format(p['a'], p['b']),\n        transform=ax.transAxes, ha=\"right\")\nax.text(1.0, 1.03, r\"$c={:.1f}\\qquad d={:.1f}$\".format(p['c'], p['d']),\n        transform=ax.transAxes, ha=\"right\")\n\nax.legend([n0, n1, eigen_0, eigen_1],\n          [r'$dx/dt=0$', r'$dy/dt=0$',\n           r\"eigenvector 1\", r\"eigenvector 2\"],\n          loc=\"center left\",\n          bbox_to_anchor=(1.0,0.5),\n          frameon=False, fancybox=False, shadow=False, ncol=1,\n          borderpad=0.5, labelspacing=0.5, handlelength=3, handletextpad=1.1,\n          borderaxespad=0.3, columnspacing=2)\n\nax.set_ylabel(r\"$y$\", rotation='horizontal')\nax.set_xlabel(r\"$x$\", labelpad=5)\n\nax.axis([min_x, max_x, min_y, max_y])\n\nfig.savefig(\"streamplot.png\", dpi=300)"
  },
  {
    "objectID": "tutorials/python/index.html",
    "href": "tutorials/python/index.html",
    "title": " Python",
    "section": "",
    "text": "Python is a great language for scientific computing, most of the programming done by our group is in python. We provide below some links for learning this language, and below we offer many python code examples. You are invited to download these codes, tweak with them, break them, hack them as you wish!\nMost codes focus on plotting, but other algorithms such as numerical integration and Fourier transforms can also be found.\nSome useful links for learning python:\n\nPython Data Science Handbook\nLearn Python the Hard Way\nA Crash Course in Python for Scientists\nSoftware Carpentry\nFun with Lists\nPython | Codecademy\nScipy Lecture Notes\nA gallery of interesting IPython Notebooks\nThink Python: How to Think Like a Computer Scientist\n\nThe Python Graph Gallery\n\nThis might be overwhelming, so I suggest you to follow this:\n\n\nMy advice on learning Python:Don't set out to \"learn Python\". Choose a problem you're interested in and learn to solve it with Python.\n\n— Jake VanderPlas (@jakevdp) September 10, 2017\n\n\nStart by downloading Anaconda, a package manager application that will help you get started with python in all platforms.\nMake sure you are acquainted with ipython (interactive python, try it here), and with Jupyter notebook. ​\nI recommend Sublime Text for writing code, and you can install the Anaconda package to it to have a smooth IDE. [not the same anaconda as mentioned above! Yes, it’s confusing, I know.]\n\nFitzhugh-Nagumo — Labyrinthine Patterns\n\n\n\n\n        Jupyter notebook\n\n\n\nMain features: how to make a movie, time-integration methods (semi-spectral and Euler)\n\n\n\nConway’s Game of Life, acorn initial condition\n\n\n\n\n        Jupyter notebook\n\n\n\nThis is a (slightly) modified version of Glowing Python’s code. I make it available here because it features a few nice things:\n\nhow to make a movie using matplotlib.animation\nhow to write a generator (function with yield)\nhow to plot a sparce array (spy)\n\nMain features: matplotlib.animation, yield, with, matplotlib.pyplot.spy\n\n\n\nLeast squares fit of nonlinear function\n\n\n\n\n        Jupyter notebook\n\n\n\nMain features: LaTeX text, scipy.optimize.curve_fit, matplotlib.patches\n\n\nFun with histograms\n\n\n\n\n        Jupyter notebook\n\n\n\nMain features: np.histogram, plt.hist, plt.bar, plt.barh, gridspec, least squares fit of nonlinear function, plt.hist2d\n\n\nFancy subplot grid\n\n\n\n\n        Jupyter notebook\n\n\n\nHighly customizable subplot structure. Also, figure contains several axis configurations and labeling options.\nMain features: gridspec subplots; numpy-compatible heaviside; label, ticks and axis manipulations; log scale \n\nStreamplot\n\n\n\n\n        Jupyter notebook\n\n\n\nStreamplot of a two-dimensional linear system, with eigenvectors and nullclines. Python shows LaTeX equations beautifully.\nMain features: meshgrid, streamplot, contour, legend, LaTeX \n\nThe time dependent Ginzburg-Landau equation\n\nJupyter notebook\n\nNumerical integration of a parabolic partial differential equation, using finite differences: Euler step to advance time, and a 5-point stencil to approximate the Laplacian.\nMain features: imshow, colorbar, set_data\n\n\n\nThe double pendulum\n\nJupyter notebook\n\nNumerical integration of the equations of motion of the double pendulum. This time, scipy’s ode itegrator was used. Nice example of how to make a movie.\nMain features: scipy.integrate.ode, set_data, set_aspect('equal'), remove plot, movie\n\n\n\nThe Hilbert curve\n\nJupyter notebook\n\nConstruction of the Hilbert curve as a Lindenmayer system (L-system).\nMain features: string operations, movie\n\n\n\nA hysteresis mechanism\n\nJupyter notebook\n\nHysteresis mechanism created by the bistability of states. System goes to minimum points u in the energy functional \\(f=u^4-2u^2+hu\\). The parameter \\(h\\) is ramped down and up during this simulation.\nMain features: sympy analytical calculations, numpy dtypes, movie\n\n\n\n\n\nContour plot\n\nJupyter notebook\n\nContour plot with many customizable options. Also, a nice way to truncate a colormap so it gives the color range that you want.\nMain features: truncate_colormap, contour, contourf (fill), clabel (contour label)\n\n\n\n\nLeast action principle on the beach\n\nJupyter notebook\n\nHow should ​lifeguard run in order to save a drowning person in minimal time? Answer: by using Snell’s law of refraction!\nThis is a nice example how to use spines (x and y axis form a cross), instead of rectangular figures as usual. Also, “annotations” are used, where things can be labeled with the help of arrows.\nMain features: spines, matplotlib.patches.Rectangle, annotate\n\n\n\n\nThis website’s logo\n\nJupyter notebook\n\nSimple example of how to make a figure without any visible axes.\nMain features: set_axis_off, fill_between, matplotlib inline plot on Jupyter\n\n\n\n\nBars\n\nJupyter notebook\n\nHorizontal and vertical bars, with numeric legends. Unicode support.\nMain features: unicode, bar, barh, grid\n\n\n“The comments aren’t there to explain the code to the programmers, the code is there to explain the comments to the computer.”\n—Andy Harris, How to begin thinking like a programmer"
  },
  {
    "objectID": "tutorials/python/widgets/par.html",
    "href": "tutorials/python/widgets/par.html",
    "title": "Yair Mau",
    "section": "",
    "text": "# write a widget in Python for Jupter notebook, where the user can change the parameters of a parabola using sliders, and the graph of the parabola responds in real time.\n# the code below was written by ChatGPT, with minor changes made by Yair\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom ipywidgets import interact, interactive, fixed, interact_manual\nimport ipywidgets as widgets\nfrom ipywidgets.embed import embed_minimal_html\n\n\ndef f(a,b,c):\n    x = np.linspace(-10,10,100)\n    y = a*x**2 + b*x + c\n    plt.plot(x,y)\n    plt.xlim([-10, 10])\n    plt.ylim([-10, 10])\n    plt.show()\n\n\ninteract(f, a=(-10,10,0.1), b=(-10,10,0.1), c=(-10,10,0.1))\n\n\n\n\n&lt;function __main__.f(a, b, c)&gt;"
  },
  {
    "objectID": "tutorials/python/widgets/chat.html",
    "href": "tutorials/python/widgets/chat.html",
    "title": "Yair Mau",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport ipywidgets as widgets\nfrom IPython.display import display\n\ndef update_plot(slope):\n    # Define x and y values for the line\n    x = [-5, 5]\n    y = [slope * i for i in x]\n    \n    # Create the plot\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    ax.set_xlim([-5, 5])\n    ax.set_ylim([-10, 10])\n    ax.grid(True)\n    plt.show()\n\nslope_slider = widgets.FloatSlider(\n    value=1.0,\n    min=-5.0,\n    max=5.0,\n    step=0.1,\n    description='Slope:',\n    readout=True,\n    readout_format='.1f',\n    layout=widgets.Layout(width='50%')\n)\n\nwidgets.interact(update_plot, slope=slope_slider)\n\n\n\n\n&lt;function __main__.update_plot(slope)&gt;"
  }
]